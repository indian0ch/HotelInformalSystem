{"ast":null,"code":"import { getRooms, modifyRoom } from \"../../classes/Room.ts\";\nimport { Guest } from \"../../classes/Guest.ts\";\n\n///Facade\nexport class ReservationRoom {\n  constructor() {\n    let full_name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Fesiuk_Andrey\";\n    let phoneNumbe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"030302032\";\n    let id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 32335552;\n    let email = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"den@gmail.com\";\n    let checkInDate = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"2023-06-01\";\n    let checkOutDate = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : \"2023-06-03\";\n    let typeRoom = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 100;\n    this.guest = void 0;\n    this.room = void 0;\n    this.typeRoom = void 0;\n    this.checkInDate = void 0;\n    this.checkOutDate = void 0;\n    this.guest = new Guest(id, full_name, email, phoneNumbe);\n    this.checkInDate = checkInDate;\n    this.checkOutDate = checkOutDate;\n    this.typeRoom = typeRoom;\n  }\n  async doReservation() {\n    console.log(this.guest);\n    let available = await this.checkAvailability();\n    if (typeof available !== \"string\") {\n      //console.log(\"1\");\n      available.checkInDate = this.checkInDate;\n      available.checkOutDate = this.checkOutDate;\n      available.guestId = this.guest.id;\n      //console.log(available);\n      this.guest.postGuest(this.guest);\n      modifyRoom(available);\n    } else {\n      //console.log(\"Check 2\");\n      window.alert(\"No one room with such parametr available!\");\n    }\n  }\n  async checkAvailability() {\n    let roomArray = await getRooms().then(roomArr => {\n      return roomArr;\n    });\n    //console.log(roomArray);\n    const availableRoomArray = roomArray.filter(room => room.guestId === null && room.pricePerNight === this.typeRoom);\n    //console.log(availableRoomArray[0]);\n    if (availableRoomArray.length !== 0) {\n      return availableRoomArray[0];\n    } else {\n      return \"No\";\n    }\n  }\n}","map":{"version":3,"names":["getRooms","modifyRoom","Guest","ReservationRoom","constructor","full_name","arguments","length","undefined","phoneNumbe","id","email","checkInDate","checkOutDate","typeRoom","guest","room","doReservation","console","log","available","checkAvailability","guestId","postGuest","window","alert","roomArray","then","roomArr","availableRoomArray","filter","pricePerNight"],"sources":["/Users/andreyfesiuk/Desktop/Курсова ООП/HotelInformalSystem/src/components/Reservation/ReservationFacade.ts"],"sourcesContent":["import { Room, getRooms, modifyRoom } from \"../../classes/Room.ts\";\nimport { Guest } from \"../../classes/Guest.ts\";\n\n///Facade\nexport class ReservationRoom {\n  protected guest: Guest;\n  protected room: Room;\n  protected typeRoom: number;\n  private checkInDate: string;\n  private checkOutDate: string;\n\n  constructor(\n    full_name: string = \"Fesiuk_Andrey\",\n    phoneNumbe: string = \"030302032\",\n    id: number = 32335552,\n    email: string = \"den@gmail.com\",\n    checkInDate: string = \"2023-06-01\",\n    checkOutDate: string = \"2023-06-03\",\n    typeRoom: number = 100\n  ) {\n    this.guest = new Guest(id, full_name, email, phoneNumbe);\n    this.checkInDate = checkInDate;\n    this.checkOutDate = checkOutDate;\n    this.typeRoom = typeRoom;\n  }\n\n  public async doReservation() {\n    console.log(this.guest);\n    let available = await this.checkAvailability();\n    if (typeof available !== \"string\") {\n      //console.log(\"1\");\n      available.checkInDate = this.checkInDate;\n      available.checkOutDate = this.checkOutDate;\n      available.guestId = this.guest.id;\n      //console.log(available);\n      this.guest.postGuest(this.guest);\n      modifyRoom(available);\n    } else {\n      //console.log(\"Check 2\");\n      window.alert(\"No one room with such parametr available!\");\n    }\n  }\n  public async checkAvailability() {\n    let roomArray = await getRooms().then((roomArr) => {\n      return roomArr;\n    });\n    //console.log(roomArray);\n    const availableRoomArray = roomArray.filter(\n      (room) => room.guestId === null && room.pricePerNight === this.typeRoom\n    );\n    //console.log(availableRoomArray[0]);\n    if (availableRoomArray.length !== 0) {\n      return availableRoomArray[0];\n    } else {\n      return \"No\";\n    }\n  }\n}\n"],"mappings":"AAAA,SAAeA,QAAQ,EAAEC,UAAU,QAAQ,uBAAuB;AAClE,SAASC,KAAK,QAAQ,wBAAwB;;AAE9C;AACA,OAAO,MAAMC,eAAe,CAAC;EAO3BC,WAAWA,CAAA,EAQT;IAAA,IAPAC,SAAiB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,eAAe;IAAA,IACnCG,UAAkB,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,WAAW;IAAA,IAChCI,EAAU,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,QAAQ;IAAA,IACrBK,KAAa,GAAAL,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,eAAe;IAAA,IAC/BM,WAAmB,GAAAN,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,YAAY;IAAA,IAClCO,YAAoB,GAAAP,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,YAAY;IAAA,IACnCQ,QAAgB,GAAAR,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,GAAG;IAAA,KAbdS,KAAK;IAAA,KACLC,IAAI;IAAA,KACJF,QAAQ;IAAA,KACVF,WAAW;IAAA,KACXC,YAAY;IAWlB,IAAI,CAACE,KAAK,GAAG,IAAIb,KAAK,CAACQ,EAAE,EAAEL,SAAS,EAAEM,KAAK,EAAEF,UAAU,CAAC;IACxD,IAAI,CAACG,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,QAAQ,GAAGA,QAAQ;EAC1B;EAEA,MAAaG,aAAaA,CAAA,EAAG;IAC3BC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACJ,KAAK,CAAC;IACvB,IAAIK,SAAS,GAAG,MAAM,IAAI,CAACC,iBAAiB,CAAC,CAAC;IAC9C,IAAI,OAAOD,SAAS,KAAK,QAAQ,EAAE;MACjC;MACAA,SAAS,CAACR,WAAW,GAAG,IAAI,CAACA,WAAW;MACxCQ,SAAS,CAACP,YAAY,GAAG,IAAI,CAACA,YAAY;MAC1CO,SAAS,CAACE,OAAO,GAAG,IAAI,CAACP,KAAK,CAACL,EAAE;MACjC;MACA,IAAI,CAACK,KAAK,CAACQ,SAAS,CAAC,IAAI,CAACR,KAAK,CAAC;MAChCd,UAAU,CAACmB,SAAS,CAAC;IACvB,CAAC,MAAM;MACL;MACAI,MAAM,CAACC,KAAK,CAAC,2CAA2C,CAAC;IAC3D;EACF;EACA,MAAaJ,iBAAiBA,CAAA,EAAG;IAC/B,IAAIK,SAAS,GAAG,MAAM1B,QAAQ,CAAC,CAAC,CAAC2B,IAAI,CAAEC,OAAO,IAAK;MACjD,OAAOA,OAAO;IAChB,CAAC,CAAC;IACF;IACA,MAAMC,kBAAkB,GAAGH,SAAS,CAACI,MAAM,CACxCd,IAAI,IAAKA,IAAI,CAACM,OAAO,KAAK,IAAI,IAAIN,IAAI,CAACe,aAAa,KAAK,IAAI,CAACjB,QACjE,CAAC;IACD;IACA,IAAIe,kBAAkB,CAACtB,MAAM,KAAK,CAAC,EAAE;MACnC,OAAOsB,kBAAkB,CAAC,CAAC,CAAC;IAC9B,CAAC,MAAM;MACL,OAAO,IAAI;IACb;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}