{"ast":null,"code":"//Передбачається функція реєстрації/логіну - Pattern Одинак[Singleton]\n\n// User class\nexport class Worker {\n  constructor(username, password) {\n    this.username = username;\n    this.password = password;\n  }\n}\n\n// Authentication service\nexport class AuthenticationService {\n  constructor() {\n    this.users = void 0;\n    this.users = [];\n  }\n  static getInstance() {\n    if (!AuthenticationService.instance) {\n      AuthenticationService.instance = new AuthenticationService();\n    }\n    return AuthenticationService.instance;\n  }\n  register(username, password) {\n    const newUser = new Worker(username, password);\n    this.users.push(newUser);\n    console.log(`User \"${username}\" registered successfully!`);\n  }\n  login(username, password) {\n    const user = this.users.find(person => person.username === username && person.password === password);\n    if (user) {\n      console.log(`User \"${username}\" logged in successfully!`);\n    } else {\n      console.log(`Invalid credentials. Please try again!`);\n    }\n  }\n  logout(username) {\n    console.log(`User \"${username}\" logged out successfully!`);\n  }\n}\nAuthenticationService.instance = void 0;","map":{"version":3,"names":["Worker","constructor","username","password","AuthenticationService","users","getInstance","instance","register","newUser","push","console","log","login","user","find","person","logout"],"sources":["/Users/andreyfesiuk/Desktop/FE4U/react-udemy/HotelInformalSystem/src/components/Authentication/AuthenticationSingleton.ts"],"sourcesContent":["//Передбачається функція реєстрації/логіну - Pattern Одинак[Singleton]\n\n// User class\nexport class Worker {\n  constructor(public username: string, public password: string) {}\n}\n\n// Authentication service\nexport class AuthenticationService {\n  private static instance: AuthenticationService;\n  private users: Worker[];\n\n  private constructor() {\n    this.users = [];\n  }\n\n  static getInstance(): AuthenticationService {\n    if (!AuthenticationService.instance) {\n      AuthenticationService.instance = new AuthenticationService();\n    }\n    return AuthenticationService.instance;\n  }\n\n  register(username: string, password: string): void {\n    const newUser = new Worker(username, password);\n    this.users.push(newUser);\n    console.log(`User \"${username}\" registered successfully!`);\n  }\n\n  login(username: string, password: string): void {\n    const user = this.users.find(\n      (person) => person.username === username && person.password === password\n    );\n    if (user) {\n      console.log(`User \"${username}\" logged in successfully!`);\n    } else {\n      console.log(`Invalid credentials. Please try again!`);\n    }\n  }\n\n  logout(username: string): void {\n    console.log(`User \"${username}\" logged out successfully!`);\n  }\n}\n"],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,MAAM,CAAC;EAClBC,WAAWA,CAAQC,QAAgB,EAASC,QAAgB,EAAE;IAAA,KAA3CD,QAAgB,GAAhBA,QAAgB;IAAA,KAASC,QAAgB,GAAhBA,QAAgB;EAAG;AACjE;;AAEA;AACA,OAAO,MAAMC,qBAAqB,CAAC;EAIzBH,WAAWA,CAAA,EAAG;IAAA,KAFdI,KAAK;IAGX,IAAI,CAACA,KAAK,GAAG,EAAE;EACjB;EAEA,OAAOC,WAAWA,CAAA,EAA0B;IAC1C,IAAI,CAACF,qBAAqB,CAACG,QAAQ,EAAE;MACnCH,qBAAqB,CAACG,QAAQ,GAAG,IAAIH,qBAAqB,CAAC,CAAC;IAC9D;IACA,OAAOA,qBAAqB,CAACG,QAAQ;EACvC;EAEAC,QAAQA,CAACN,QAAgB,EAAEC,QAAgB,EAAQ;IACjD,MAAMM,OAAO,GAAG,IAAIT,MAAM,CAACE,QAAQ,EAAEC,QAAQ,CAAC;IAC9C,IAAI,CAACE,KAAK,CAACK,IAAI,CAACD,OAAO,CAAC;IACxBE,OAAO,CAACC,GAAG,CAAE,SAAQV,QAAS,4BAA2B,CAAC;EAC5D;EAEAW,KAAKA,CAACX,QAAgB,EAAEC,QAAgB,EAAQ;IAC9C,MAAMW,IAAI,GAAG,IAAI,CAACT,KAAK,CAACU,IAAI,CACzBC,MAAM,IAAKA,MAAM,CAACd,QAAQ,KAAKA,QAAQ,IAAIc,MAAM,CAACb,QAAQ,KAAKA,QAClE,CAAC;IACD,IAAIW,IAAI,EAAE;MACRH,OAAO,CAACC,GAAG,CAAE,SAAQV,QAAS,2BAA0B,CAAC;IAC3D,CAAC,MAAM;MACLS,OAAO,CAACC,GAAG,CAAE,wCAAuC,CAAC;IACvD;EACF;EAEAK,MAAMA,CAACf,QAAgB,EAAQ;IAC7BS,OAAO,CAACC,GAAG,CAAE,SAAQV,QAAS,4BAA2B,CAAC;EAC5D;AACF;AAnCaE,qBAAqB,CACjBG,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}