{"ast":null,"code":"//Передбачається функція реєстрації/логіну для персоналу готелю з метою входу у свій особистий кабінет - Pattern Одинак[Singleton]\n//Transfers the registration/login function for hotel staff with land access to their personal account - Pattern [Singleton]\nimport { getWorkerById } from \"../../classes/Employee.ts\";\nconst urlJsonEmployee = \"http://localhost:4000/workers\";\nconst urlJsonServer = \"http://localhost:4000\";\nexport class ProxyService {\n  constructor(authService) {\n    this.authService = void 0;\n    this.status = void 0;\n    this.authService = authService;\n  }\n  async checkAccess() {\n    await fetch(urlJsonServer).then(response => {\n      if (response.ok) {\n        this.status = true;\n      } else {\n        this.status = false;\n      }\n    }).catch(error => {\n      console.log(\"Error:\", error.message);\n      alert(\"JSON server is not running! Check errors in console\");\n    });\n  }\n  async login(workerId, name) {\n    await this.checkAccess();\n    if (this.status === true) {\n      this.authService.login(workerId, name);\n      alert(\"ok\");\n    } else {\n      alert(\"No response from database\");\n    }\n  }\n  getStatus() {\n    return this.authService.getStatus();\n  }\n  logout() {\n    this.authService.logout();\n  }\n}\n// Authentication service\nexport class AuthenticationService {\n  constructor() {\n    //private static instance: AuthenticationService;\n    this.status = void 0;\n    this.status = false;\n  }\n\n  // public static getInstance(): AuthenticationService {\n  //   if (!AuthenticationService.instance) {\n  //     AuthenticationService.instance = new AuthenticationService();\n  //   }\n  //   return AuthenticationService.instance;\n  // }\n\n  async login(workerId, name) {\n    let workerObject = await getWorkerById(workerId).then(employee => {\n      return employee;\n    });\n    console.log(workerObject);\n    if (workerObject.length !== 0) {\n      if (workerObject[0].status === true && workerObject[0].position === \"manager\") {\n        alert(`Manager \"${name}\" logged in successfully!`);\n        this.status = true;\n      } else {\n        alert(`Manager with such username do not found!`);\n      }\n    } else {\n      alert(`Manager with such username do not found!`);\n    }\n    console.log(this.status);\n  }\n  getStatus() {\n    return this.status;\n  }\n  logout() {\n    alert(`Manager logged out successfully!`);\n    this.status = false;\n  }\n}","map":{"version":3,"names":["getWorkerById","urlJsonEmployee","urlJsonServer","ProxyService","constructor","authService","status","checkAccess","fetch","then","response","ok","catch","error","console","log","message","alert","login","workerId","name","getStatus","logout","AuthenticationService","workerObject","employee","length","position"],"sources":["/Users/andreyfesiuk/Desktop/Курсова ООП/HotelInformalSystem/src/components/Authentication/AuthenticationSingleton.ts"],"sourcesContent":["//Передбачається функція реєстрації/логіну для персоналу готелю з метою входу у свій особистий кабінет - Pattern Одинак[Singleton]\n//Transfers the registration/login function for hotel staff with land access to their personal account - Pattern [Singleton]\nimport { Employee, getWorkerById } from \"../../classes/Employee.ts\";\nconst urlJsonEmployee = \"http://localhost:4000/workers\";\nconst urlJsonServer = \"http://localhost:4000\";\n\ninterface Services {\n  login(workerId: number, name: string): void;\n  logout(): void;\n}\nexport class ProxyService implements Services {\n  private authService: AuthenticationService;\n  private status: boolean;\n\n  constructor(authService: AuthenticationService) {\n    this.authService = authService;\n  }\n\n  private async checkAccess() {\n    await fetch(urlJsonServer)\n      .then((response) => {\n        if (response.ok) {\n          this.status = true;\n        } else {\n          this.status = false;\n        }\n      })\n      .catch((error) => {\n        console.log(\"Error:\", error.message);\n        alert(\"JSON server is not running! Check errors in console\");\n      });\n  }\n\n  public async login(workerId: number, name: string) {\n    await this.checkAccess();\n    if (this.status === true) {\n      this.authService.login(workerId, name);\n      alert(\"ok\");\n    } else {\n      alert(\"No response from database\");\n    }\n  }\n\n  public getStatus() {\n    return this.authService.getStatus();\n  }\n\n  public logout(): void {\n    this.authService.logout();\n  }\n}\n// Authentication service\nexport class AuthenticationService implements Services {\n  //private static instance: AuthenticationService;\n  private status: boolean;\n\n  constructor() {\n    this.status = false;\n  }\n\n  // public static getInstance(): AuthenticationService {\n  //   if (!AuthenticationService.instance) {\n  //     AuthenticationService.instance = new AuthenticationService();\n  //   }\n  //   return AuthenticationService.instance;\n  // }\n\n  public async login(workerId: number, name: string) {\n    let workerObject = await getWorkerById(workerId).then((employee) => {\n      return employee;\n    });\n    console.log(workerObject);\n    if (workerObject.length !== 0) {\n      if (\n        workerObject[0].status === true &&\n        workerObject[0].position === \"manager\"\n      ) {\n        alert(`Manager \"${name}\" logged in successfully!`);\n        this.status = true;\n      } else {\n        alert(`Manager with such username do not found!`);\n      }\n    } else {\n      alert(`Manager with such username do not found!`);\n    }\n    console.log(this.status);\n  }\n\n  public getStatus() {\n    return this.status;\n  }\n\n  public logout(): void {\n    alert(`Manager logged out successfully!`);\n    this.status = false;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA,SAAmBA,aAAa,QAAQ,2BAA2B;AACnE,MAAMC,eAAe,GAAG,+BAA+B;AACvD,MAAMC,aAAa,GAAG,uBAAuB;AAM7C,OAAO,MAAMC,YAAY,CAAqB;EAI5CC,WAAWA,CAACC,WAAkC,EAAE;IAAA,KAHxCA,WAAW;IAAA,KACXC,MAAM;IAGZ,IAAI,CAACD,WAAW,GAAGA,WAAW;EAChC;EAEA,MAAcE,WAAWA,CAAA,EAAG;IAC1B,MAAMC,KAAK,CAACN,aAAa,CAAC,CACvBO,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAIA,QAAQ,CAACC,EAAE,EAAE;QACf,IAAI,CAACL,MAAM,GAAG,IAAI;MACpB,CAAC,MAAM;QACL,IAAI,CAACA,MAAM,GAAG,KAAK;MACrB;IACF,CAAC,CAAC,CACDM,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,KAAK,CAACG,OAAO,CAAC;MACpCC,KAAK,CAAC,qDAAqD,CAAC;IAC9D,CAAC,CAAC;EACN;EAEA,MAAaC,KAAKA,CAACC,QAAgB,EAAEC,IAAY,EAAE;IACjD,MAAM,IAAI,CAACb,WAAW,CAAC,CAAC;IACxB,IAAI,IAAI,CAACD,MAAM,KAAK,IAAI,EAAE;MACxB,IAAI,CAACD,WAAW,CAACa,KAAK,CAACC,QAAQ,EAAEC,IAAI,CAAC;MACtCH,KAAK,CAAC,IAAI,CAAC;IACb,CAAC,MAAM;MACLA,KAAK,CAAC,2BAA2B,CAAC;IACpC;EACF;EAEOI,SAASA,CAAA,EAAG;IACjB,OAAO,IAAI,CAAChB,WAAW,CAACgB,SAAS,CAAC,CAAC;EACrC;EAEOC,MAAMA,CAAA,EAAS;IACpB,IAAI,CAACjB,WAAW,CAACiB,MAAM,CAAC,CAAC;EAC3B;AACF;AACA;AACA,OAAO,MAAMC,qBAAqB,CAAqB;EAIrDnB,WAAWA,CAAA,EAAG;IAHd;IAAA,KACQE,MAAM;IAGZ,IAAI,CAACA,MAAM,GAAG,KAAK;EACrB;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAaY,KAAKA,CAACC,QAAgB,EAAEC,IAAY,EAAE;IACjD,IAAII,YAAY,GAAG,MAAMxB,aAAa,CAACmB,QAAQ,CAAC,CAACV,IAAI,CAAEgB,QAAQ,IAAK;MAClE,OAAOA,QAAQ;IACjB,CAAC,CAAC;IACFX,OAAO,CAACC,GAAG,CAACS,YAAY,CAAC;IACzB,IAAIA,YAAY,CAACE,MAAM,KAAK,CAAC,EAAE;MAC7B,IACEF,YAAY,CAAC,CAAC,CAAC,CAAClB,MAAM,KAAK,IAAI,IAC/BkB,YAAY,CAAC,CAAC,CAAC,CAACG,QAAQ,KAAK,SAAS,EACtC;QACAV,KAAK,CAAE,YAAWG,IAAK,2BAA0B,CAAC;QAClD,IAAI,CAACd,MAAM,GAAG,IAAI;MACpB,CAAC,MAAM;QACLW,KAAK,CAAE,0CAAyC,CAAC;MACnD;IACF,CAAC,MAAM;MACLA,KAAK,CAAE,0CAAyC,CAAC;IACnD;IACAH,OAAO,CAACC,GAAG,CAAC,IAAI,CAACT,MAAM,CAAC;EAC1B;EAEOe,SAASA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACf,MAAM;EACpB;EAEOgB,MAAMA,CAAA,EAAS;IACpBL,KAAK,CAAE,kCAAiC,CAAC;IACzC,IAAI,CAACX,MAAM,GAAG,KAAK;EACrB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}