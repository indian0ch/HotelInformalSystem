{"ast":null,"code":"//Функція оцінки клієнтами якості обслуговування по шкалі 0/10 - Pattern Спостерігач\nconst urlJsonReviews = \"http://localhost:4000/reviews\";\n//Subscribes\n\nexport class ResidentReviews {\n  constructor(nameres, text) {\n    this.nameres = void 0;\n    this.satisfactionLevel = void 0;\n    this.textReview = void 0;\n    this.ListAdmins = void 0;\n    this.nameres = nameres;\n    this.textReview = text;\n    this.ListAdmins = [];\n  }\n  get nameResident() {\n    return this.nameres;\n  }\n  get SatisfactionLevelGet() {\n    return this.satisfactionLevel;\n  }\n  get textRevieGet() {\n    return this.textReview;\n  }\n  set SatisfactionLevelSet(value) {\n    this.satisfactionLevel = value;\n    this.notify();\n  }\n  attach(observer) {\n    this.ListAdmins.push(observer);\n  }\n  detach(observer) {\n    const index = this.ListAdmins.indexOf(observer);\n    if (index !== -1) {\n      this.ListAdmins.splice(index, 1);\n    }\n  }\n  async addReview(concreteSubject) {\n    await fetch(urlJsonReviews, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(concreteSubject)\n    }).then(response => response.json()).then(concreteSubject => {\n      window.alert(\"Review added to a database!\");\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n  notify() {\n    for (const observer of this.ListAdmins) {\n      observer.update(this);\n    }\n  }\n}\n\n//declare the update method used by subjects\n\nexport class HotelAdministration {\n  constructor() {\n    let observerName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Vlad';\n    this.administrationName = void 0;\n    this.administrationName = observerName;\n  }\n  update(subject) {\n    if (subject instanceof ResidentReviews) {\n      const concreteSubject = subject;\n      concreteSubject.addReview(concreteSubject);\n      if (concreteSubject.SatisfactionLevelGet >= 4) {\n        alert(`Адміністратор ${this.administrationName} отримав оцінку від користувача ${concreteSubject.nameResident} стосовно якості обслуговування готелю. Оцінка: ${concreteSubject.SatisfactionLevelGet}. Адміністратор ${this.administrationName} задоволений результатом роботи готелю і вдячний ${concreteSubject.nameResident} за хорошу оцінку!`);\n      } else {\n        alert(`Адміністратор ${this.administrationName} отримав оцінку від користувача ${concreteSubject.nameResident} стосовно якості обслуговування готелю. Оцінка: ${concreteSubject.SatisfactionLevelGet}. Адміністратор ${this.administrationName} просить ${concreteSubject.nameResident} прийняти вибачення і пообіцяв виправити ситуацію!`);\n      }\n    }\n  }\n}","map":{"version":3,"names":["urlJsonReviews","ResidentReviews","constructor","nameres","text","satisfactionLevel","textReview","ListAdmins","nameResident","SatisfactionLevelGet","textRevieGet","SatisfactionLevelSet","value","notify","attach","observer","push","detach","index","indexOf","splice","addReview","concreteSubject","fetch","method","headers","body","JSON","stringify","then","response","json","window","alert","catch","error","console","update","HotelAdministration","observerName","arguments","length","undefined","administrationName","subject"],"sources":["/Users/andreyfesiuk/Desktop/Курсова ООП/HotelInformalSystem/src/components/Review/ReviewObserver.ts"],"sourcesContent":["//Функція оцінки клієнтами якості обслуговування по шкалі 0/10 - Pattern Спостерігач\nconst urlJsonReviews=\"http://localhost:4000/reviews\";\n//Subscribes\nexport interface ISubject {\n  attach(observer: IObserver): void;\n  detach(observer: IObserver): void;\n  notify(): void;\n}\n\nexport class ResidentReviews implements ISubject {\n  private nameres: string;\n  private satisfactionLevel: number;\n  private textReview:string;\n  private ListAdmins: IObserver[];\n\n  constructor(nameres: string,text:string) {\n    this.nameres = nameres;\n    this.textReview=text;\n    this.ListAdmins = [];\n  }\n\n  public get nameResident(): string {\n    return this.nameres;\n  }\n\n  public get SatisfactionLevelGet(): number {\n    return this.satisfactionLevel;\n  }\n  public get textRevieGet(): string {\n    return this.textReview;\n  }\n  public set SatisfactionLevelSet(value: number) {\n    this.satisfactionLevel = value;\n    this.notify();\n  }\n\n  public attach(observer: IObserver) {\n    this.ListAdmins.push(observer);\n  }\n\n  public detach(observer: IObserver) {\n    const index = this.ListAdmins.indexOf(observer);\n    if (index !== -1) {\n      this.ListAdmins.splice(index, 1);\n    }\n  }\n\n  public async addReview(concreteSubject:ResidentReviews){\n    await fetch(urlJsonReviews, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(concreteSubject),\n    })\n      .then((response) => response.json())\n      .then((concreteSubject: ResidentReviews) => {\n        window.alert(\"Review added to a database!\");\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }\n\n  public notify() {\n    for (const observer of this.ListAdmins) {\n      observer.update(this);\n    }\n  }\n}\n\n//declare the update method used by subjects\nexport interface IObserver {\n  update(subject: ISubject): void;\n}\n\nexport class HotelAdministration implements IObserver {\n  private administrationName: string;\n\n  constructor(observerName: string='Vlad') {\n    this.administrationName = observerName;\n  }\n\n  public update(subject: ISubject) {\n    if (subject instanceof ResidentReviews) {\n      const concreteSubject: ResidentReviews = subject;\n      concreteSubject.addReview(concreteSubject);\n      if (concreteSubject.SatisfactionLevelGet >= 4) {\n        alert(`Адміністратор ${this.administrationName} отримав оцінку від користувача ${concreteSubject.nameResident} стосовно якості обслуговування готелю. Оцінка: ${concreteSubject.SatisfactionLevelGet}. Адміністратор ${this.administrationName} задоволений результатом роботи готелю і вдячний ${concreteSubject.nameResident} за хорошу оцінку!`);\n      } else {\n        alert(`Адміністратор ${this.administrationName} отримав оцінку від користувача ${concreteSubject.nameResident} стосовно якості обслуговування готелю. Оцінка: ${concreteSubject.SatisfactionLevelGet}. Адміністратор ${this.administrationName} просить ${concreteSubject.nameResident} прийняти вибачення і пообіцяв виправити ситуацію!`);\n      }\n    }\n  }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}