{"ast":null,"code":"import _classCallCheck from\"/Users/andreyfesiuk/Desktop/\\u041A\\u0443\\u0440\\u0441\\u043E\\u0432\\u0430 \\u041E\\u041E\\u041F/HotelInformalSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/andreyfesiuk/Desktop/\\u041A\\u0443\\u0440\\u0441\\u043E\\u0432\\u0430 \\u041E\\u041E\\u041F/HotelInformalSystem/node_modules/@babel/runtime/helpers/esm/createClass.js\";//Передбачається функція реєстрації/логіну для персоналу готелю з метою входу у свій особистий кабінет - Pattern Одинак[Singleton]\n//Transfers the registration/login function for hotel staff with land access to their personal account - Pattern [Singleton]\n// Worker class\nexport var Worker=/*#__PURE__*/function(){function Worker(username,password){_classCallCheck(this,Worker);this.username=void 0;this.password=void 0;this.hours=void 0;this.roomToClean=void 0;this.username=username;this.password=password;this.hours=10;this.roomToClean=null;}_createClass(Worker,[{key:\"setRandomHours\",value:function setRandomHours(minHours,maxHours){this.hours=Math.floor(Math.random()*(maxHours-minHours+1))+minHours;}},{key:\"assignRoomToClean\",value:function assignRoomToClean(roomNumber){this.roomToClean=roomNumber;}},{key:\"cleanRoom\",value:function cleanRoom(){if(this.roomToClean!==null){console.log(\"Worker \".concat(this.username,\" is cleaning room \").concat(this.roomToClean,\".\"));// Perform cleaning operations\nthis.roomToClean=null;// Reset assigned room\n}else{console.log(\"No room assigned to clean.\");}}},{key:\"getHours\",value:function getHours(){return this.hours;}},{key:\"getPassword\",value:function getPassword(){return this.password;}},{key:\"getUsername\",value:function getUsername(){return this.username;}},{key:\"getRoomToClean\",value:function getRoomToClean(){return this.roomToClean;}}]);return Worker;}();// Authentication service\nexport var AuthenticationService=/*#__PURE__*/function(){function AuthenticationService(){_classCallCheck(this,AuthenticationService);this.users=void 0;this.lastLogin=void 0;this.users=[];}_createClass(AuthenticationService,[{key:\"register\",value:function register(username,password){var newUser=new Worker(username,password);this.users.push(newUser);console.log(\"User \\\"\".concat(username,\"\\\" registered successfully!\"));}},{key:\"login\",value:function login(username,password){//delete\nvar newUser=new Worker(username,password);this.users.push(newUser);var user=this.users.find(function(person){return person.getUsername()===username&&person.getPassword()===password;});if(user){console.log(\"User \\\"\".concat(username,\"\\\" logged in successfully!\"));this.lastLogin=username;}else{console.log(\"Invalid credentials. Please try again!\");}}},{key:\"getLastLogin\",value:function getLastLogin(){return this.lastLogin;}},{key:\"getUsers\",value:function getUsers(){return this.users;}},{key:\"logout\",value:function logout(username){console.log(\"User \\\"\".concat(username,\"\\\" logged out successfully!\"));this.lastLogin=null;}}],[{key:\"getInstance\",value:function getInstance(){if(!AuthenticationService.instance){AuthenticationService.instance=new AuthenticationService();}return AuthenticationService.instance;}}]);return AuthenticationService;}();AuthenticationService.instance=void 0;","map":{"version":3,"names":["Worker","username","password","_classCallCheck","hours","roomToClean","_createClass","key","value","setRandomHours","minHours","maxHours","Math","floor","random","assignRoomToClean","roomNumber","cleanRoom","console","log","concat","getHours","getPassword","getUsername","getRoomToClean","AuthenticationService","users","lastLogin","register","newUser","push","login","user","find","person","getLastLogin","getUsers","logout","getInstance","instance"],"sources":["/Users/andreyfesiuk/Desktop/Курсова ООП/HotelInformalSystem/src/components/Authentication/AuthenticationSingleton.ts"],"sourcesContent":["//Передбачається функція реєстрації/логіну для персоналу готелю з метою входу у свій особистий кабінет - Pattern Одинак[Singleton]\n//Transfers the registration/login function for hotel staff with land access to their personal account - Pattern [Singleton]\n\n// Worker class\nexport class Worker {\n  private username: string;\n  private password: string;\n  private hours: number;\n  private roomToClean: number | null;\n\n  constructor(username: string, password: string) {\n    this.username = username;\n    this.password = password;\n    this.hours = 10;\n    this.roomToClean = null;\n  }\n\n  public setRandomHours(minHours: number, maxHours: number): void {\n    this.hours =\n      Math.floor(Math.random() * (maxHours - minHours + 1)) + minHours;\n  }\n\n  public assignRoomToClean(roomNumber: number): void {\n    this.roomToClean = roomNumber;\n  }\n\n  public cleanRoom(): void {\n    if (this.roomToClean !== null) {\n      console.log(\n        `Worker ${this.username} is cleaning room ${this.roomToClean}.`\n      );\n      // Perform cleaning operations\n      this.roomToClean = null; // Reset assigned room\n    } else {\n      console.log(\"No room assigned to clean.\");\n    }\n  }\n\n  public getHours(): number {\n    return this.hours;\n  }\n\n  public getPassword(): string {\n    return this.password;\n  }\n  public getUsername(): string {\n    return this.username;\n  }\n\n  public getRoomToClean(): number | null {\n    return this.roomToClean;\n  }\n}\n\n// Authentication service\nexport class AuthenticationService {\n  private static instance: AuthenticationService;\n  private users: Worker[];\n  private lastLogin: string;\n\n  private constructor() {\n    this.users = [];\n  }\n\n  static getInstance(): AuthenticationService {\n    if (!AuthenticationService.instance) {\n      AuthenticationService.instance = new AuthenticationService();\n    }\n    return AuthenticationService.instance;\n  }\n\n  register(username: string, password: string): void {\n    const newUser = new Worker(username, password);\n    this.users.push(newUser);\n    console.log(`User \"${username}\" registered successfully!`);\n  }\n\n  login(username: string, password: string): void {\n    //delete\n    const newUser = new Worker(username, password);\n    this.users.push(newUser);\n    const user = this.users.find(\n      (person) =>\n        person.getUsername() === username && person.getPassword() === password\n    );\n    if (user) {\n      console.log(`User \"${username}\" logged in successfully!`);\n      this.lastLogin = username;\n    } else {\n      console.log(`Invalid credentials. Please try again!`);\n    }\n  }\n  public getLastLogin() {\n    return this.lastLogin;\n  }\n\n  public getUsers() {\n    return this.users;\n  }\n\n  logout(username: string): void {\n    console.log(`User \"${username}\" logged out successfully!`);\n    this.lastLogin = null;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}