{"ast":null,"code":"//Передбачається функція реєстрації/логіну для персоналу готелю з метою входу у свій особистий кабінет - Pattern Одинак[Singleton]\n//Transfers the registration/login function for hotel staff with land access to their personal account - Pattern [Singleton]\n\n// Worker class\nexport class Worker {\n  constructor(username, password) {\n    this.username = void 0;\n    this.password = void 0;\n    this.hours = void 0;\n    this.roomToClean = void 0;\n    this.username = username;\n    this.password = password;\n    this.hours = 10;\n    this.roomToClean = null;\n  }\n  setRandomHours(minHours, maxHours) {\n    this.hours = Math.floor(Math.random() * (maxHours - minHours + 1)) + minHours;\n  }\n  assignRoomToClean(roomNumber) {\n    this.roomToClean = roomNumber;\n  }\n  cleanRoom() {\n    if (this.roomToClean !== null) {\n      console.log(`Worker ${this.username} is cleaning room ${this.roomToClean}.`);\n      // Perform cleaning operations\n      this.roomToClean = null; // Reset assigned room\n    } else {\n      console.log(\"No room assigned to clean.\");\n    }\n  }\n  getHours() {\n    return this.hours;\n  }\n  getPassword() {\n    return this.password;\n  }\n  getUsername() {\n    return this.username;\n  }\n  getRoomToClean() {\n    return this.roomToClean;\n  }\n}\n\n// Authentication service\nexport class AuthenticationService {\n  constructor() {\n    this.users = void 0;\n    this.lastLogin = void 0;\n    this.users = [];\n  }\n  static getInstance() {\n    if (!AuthenticationService.instance) {\n      AuthenticationService.instance = new AuthenticationService();\n    }\n    return AuthenticationService.instance;\n  }\n  register(username, password) {\n    const newUser = new Worker(username, password);\n    this.users.push(newUser);\n    console.log(`User \"${username}\" registered successfully!`);\n  }\n  login(username, password) {\n    //delete\n    const newUser = new Worker(username, password);\n    this.users.push(newUser);\n    const user = this.users.find(person => person.getUsername() === username && person.getPassword() === password);\n    if (user) {\n      console.log(`User \"${username}\" logged in successfully!`);\n      this.lastLogin = username;\n    } else {\n      console.log(`Invalid credentials. Please try again!`);\n    }\n  }\n  getLastLogin() {\n    return this.lastLogin;\n  }\n  getUsers() {\n    return this.users;\n  }\n  logout(username) {\n    console.log(`User \"${username}\" logged out successfully!`);\n    this.lastLogin = null;\n  }\n}\nAuthenticationService.instance = void 0;","map":{"version":3,"names":["Worker","constructor","username","password","hours","roomToClean","setRandomHours","minHours","maxHours","Math","floor","random","assignRoomToClean","roomNumber","cleanRoom","console","log","getHours","getPassword","getUsername","getRoomToClean","AuthenticationService","users","lastLogin","getInstance","instance","register","newUser","push","login","user","find","person","getLastLogin","getUsers","logout"],"sources":["/Users/andreyfesiuk/Desktop/Курсова ООП/HotelInformalSystem/src/components/Authentication/AuthenticationSingleton.ts"],"sourcesContent":["//Передбачається функція реєстрації/логіну для персоналу готелю з метою входу у свій особистий кабінет - Pattern Одинак[Singleton]\n//Transfers the registration/login function for hotel staff with land access to their personal account - Pattern [Singleton]\n\n// Worker class\nexport class Worker {\n  private username: string;\n  private password: string;\n  private hours: number;\n  private roomToClean: number | null;\n\n  constructor(username: string, password: string) {\n    this.username = username;\n    this.password = password;\n    this.hours = 10;\n    this.roomToClean = null;\n  }\n\n  public setRandomHours(minHours: number, maxHours: number): void {\n    this.hours =\n      Math.floor(Math.random() * (maxHours - minHours + 1)) + minHours;\n  }\n\n  public assignRoomToClean(roomNumber: number): void {\n    this.roomToClean = roomNumber;\n  }\n\n  public cleanRoom(): void {\n    if (this.roomToClean !== null) {\n      console.log(\n        `Worker ${this.username} is cleaning room ${this.roomToClean}.`\n      );\n      // Perform cleaning operations\n      this.roomToClean = null; // Reset assigned room\n    } else {\n      console.log(\"No room assigned to clean.\");\n    }\n  }\n\n  public getHours(): number {\n    return this.hours;\n  }\n\n  public getPassword(): string {\n    return this.password;\n  }\n  public getUsername(): string {\n    return this.username;\n  }\n\n  public getRoomToClean(): number | null {\n    return this.roomToClean;\n  }\n}\n\n// Authentication service\nexport class AuthenticationService {\n  private static instance: AuthenticationService;\n  private users: Worker[];\n  private lastLogin: string;\n\n  private constructor() {\n    this.users = [];\n  }\n\n  static getInstance(): AuthenticationService {\n    if (!AuthenticationService.instance) {\n      AuthenticationService.instance = new AuthenticationService();\n    }\n    return AuthenticationService.instance;\n  }\n\n  register(username: string, password: string): void {\n    const newUser = new Worker(username, password);\n    this.users.push(newUser);\n    console.log(`User \"${username}\" registered successfully!`);\n  }\n\n  login(username: string, password: string): void {\n    //delete\n    const newUser = new Worker(username, password);\n    this.users.push(newUser);\n    const user = this.users.find(\n      (person) =>\n        person.getUsername() === username && person.getPassword() === password\n    );\n    if (user) {\n      console.log(`User \"${username}\" logged in successfully!`);\n      this.lastLogin = username;\n    } else {\n      console.log(`Invalid credentials. Please try again!`);\n    }\n  }\n  public getLastLogin() {\n    return this.lastLogin;\n  }\n\n  public getUsers() {\n    return this.users;\n  }\n\n  logout(username: string): void {\n    console.log(`User \"${username}\" logged out successfully!`);\n    this.lastLogin = null;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}