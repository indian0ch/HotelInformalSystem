{"ast":null,"code":"const urlJsonEmployee = \"http://localhost:4000/workers\";\nexport class Employee {\n  constructor(name, employeeId, position, salary) {\n    let messageAdmin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n    this.name = void 0;\n    this.id = void 0;\n    this.position = void 0;\n    this.salary = void 0;\n    this.messageAdmin = void 0;\n    this.name = name;\n    this.id = employeeId;\n    this.position = position;\n    this.salary = salary;\n    this.messageAdmin = messageAdmin;\n  }\n  getName() {\n    return this.name;\n  }\n  getEmployeeId() {\n    return this.id;\n  }\n  getPosition() {\n    return this.position;\n  }\n  getSalary() {\n    return this.salary;\n  }\n  getMessage() {\n    return this.messageAdmin;\n  }\n  calculatePay() {\n    // Метод для розрахунку заробітної плати\n    // Реалізація цього методу залежить від конкретних правил готелю\n    return this.salary;\n  }\n  addWorker(newEmployee) {\n    // console.log(`${workerName} прийнятий на роботу`);\n    // this.ListWorkers.push(workerName, position);\n    fetch(urlJsonEmployee, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newEmployee)\n    }).then(response => response.json()).then(newEmployee => {\n      window.alert(\"Employee added to a database!\");\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n}\nexport class CleaningEmployee extends Employee {\n  constructor(name, id, position, salary) {\n    let messageAdmin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n    let cleaningArea = arguments.length > 5 ? arguments[5] : undefined;\n    super(name, id, position, salary, messageAdmin);\n    this.cleaningRoomNumbers = [];\n    this.cleaningRoomNumbers = cleaningArea;\n  }\n  getCleaningRoomNumbers() {\n    return this.cleaningRoomNumbers;\n  }\n  quickCleaning() {\n    //\n  }\n}\nexport function getWorker(workerId) {\n  return fetch(urlJsonEmployee).then(response => response.json()).then(data => {\n    const rooms = data; // Assuming the response directly contains the room data\n    //console.log(rooms);\n    return rooms;\n  }).catch(error => {\n    console.error(error);\n  });\n}","map":{"version":3,"names":["urlJsonEmployee","Employee","constructor","name","employeeId","position","salary","messageAdmin","arguments","length","undefined","id","getName","getEmployeeId","getPosition","getSalary","getMessage","calculatePay","addWorker","newEmployee","fetch","method","headers","body","JSON","stringify","then","response","json","window","alert","catch","error","console","CleaningEmployee","cleaningArea","cleaningRoomNumbers","getCleaningRoomNumbers","quickCleaning","getWorker","workerId","data","rooms"],"sources":["/Users/andreyfesiuk/Desktop/Курсова ООП/HotelInformalSystem/src/classes/Employee.ts"],"sourcesContent":["const urlJsonEmployee = \"http://localhost:4000/workers\";\nexport class Employee {\n  private name: string;\n  private id: number;\n  private position: string;\n  private salary: number;\n  private messageAdmin: string;\n\n  constructor(\n    name: string,\n    employeeId: number,\n    position: string,\n    salary: number,\n    messageAdmin: string=''\n  ) {\n    this.name = name;\n    this.id = employeeId;\n    this.position = position;\n    this.salary = salary;\n    this.messageAdmin = messageAdmin;\n  }\n\n  public getName(): string {\n    return this.name;\n  }\n\n  public getEmployeeId(): number {\n    return this.id;\n  }\n\n  public getPosition(): string {\n    return this.position;\n  }\n\n  public getSalary(): number {\n    return this.salary;\n  }\n\n  public getMessage(): string {\n    return this.messageAdmin;\n  }\n\n  public calculatePay(): number {\n    // Метод для розрахунку заробітної плати\n    // Реалізація цього методу залежить від конкретних правил готелю\n    return this.salary;\n  }\n\n  public addWorker(newEmployee: Employee): void {\n    // console.log(`${workerName} прийнятий на роботу`);\n    // this.ListWorkers.push(workerName, position);\n    fetch(urlJsonEmployee, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(newEmployee),\n    })\n      .then((response) => response.json())\n      .then((newEmployee: Employee) => {\n        window.alert(\"Employee added to a database!\");\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }\n}\nexport class CleaningEmployee extends Employee {\n  private cleaningRoomNumbers: string[] = [];\n\n  constructor(\n    name: string,\n    id: number,\n    position: string,\n    salary: number,\n    messageAdmin: string='',\n    cleaningArea: string[]\n  ) {\n    super(name, id, position, salary, messageAdmin);\n    this.cleaningRoomNumbers = cleaningArea;\n  }\n\n  public getCleaningRoomNumbers(): string[] {\n    return this.cleaningRoomNumbers;\n  }\n\n  public quickCleaning(): void {\n    //\n  }\n}\nexport function getWorker(workerId:string){\n  return fetch(urlJsonEmployee)\n    .then((response) => response.json())\n    .then((data) => {\n      const rooms = data; // Assuming the response directly contains the room data\n      //console.log(rooms);\n      return rooms;\n    })\n    .catch((error) => {\n      console.error(error);\n    });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}