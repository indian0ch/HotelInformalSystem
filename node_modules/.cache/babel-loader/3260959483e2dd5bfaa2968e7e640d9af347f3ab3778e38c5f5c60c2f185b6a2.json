{"ast":null,"code":"// export interface IReservationStrategy {\n//   Reservation(): void;\n// }\n\n// export class StandartReservation implements IReservationStrategy {\n//   Reservation() {\n//     console.log(\"Резервація стандартного номера\");\n//   }\n// }\n\n// export class MiddleReservation implements IReservationStrategy {\n//   Reservation() {\n//     console.log(\"Резервація середнього номера\");\n//   }\n// }\n\n// export class LuxuryReservation implements IReservationStrategy {\n//   Reservation() {\n//     console.log(\"Резервація люксового номера\");\n//   }\n// }\n\n// export class Room {\n//   protected surname: string;\n//   protected name: string;\n//   protected id: number;\n//   protected city: string;\n//   public Reserv: IReservationStrategy;\n\n//   constructor(\n// surname: string = \"Fesiuk\",\n// name: string = \"Andrey\",\n// id: number = 3434,\n// city: string = \"Kyiv\",\n//     res: IReservationStrategy = new StandartReservation()\n//   ) {\n//     this.surname = surname;\n//     this.name = name;\n//     this.id = id;\n//     this.city = city;\n//     this.Reserv = res;\n//   }\n\n//   public Reservation() {\n//     this.Reserv.Reservation();\n//   }\n// }\nimport { Guest } from \"../../classes/Guest\";\nimport { Room } from \"../../classes/Room\";\n///Facade\nclass Reservation {\n  /**\n   * Depending on your application's needs, you can provide the Facade with\n   * existing subsystem objects or force the Facade to create them on its own.\n   */\n  constructor(guest, room) {\n    this.guest = void 0;\n    this.room = void 0;\n    this.guest = guest || new Guest();\n    this.room = room || new Room();\n  }\n\n  /**\n   * The Facade's methods are convenient shortcuts to the sophisticated\n   * functionality of the subsystems. However, clients get only to a fraction\n   * of a subsystem's capabilities.\n   */\n  Reservaion() {\n    let result = \"Facade initializes subsystems:\\n\";\n    result += this.subsystem1.operation1();\n    result += this.subsystem2.operation1();\n    result += \"Facade orders subsystems to perform the action:\\n\";\n    result += this.subsystem1.operationN();\n    result += this.subsystem2.operationZ();\n    return result;\n  }\n}","map":{"version":3,"names":["Guest","Room","Reservation","constructor","guest","room","Reservaion","result","subsystem1","operation1","subsystem2","operationN","operationZ"],"sources":["/Users/andreyfesiuk/Desktop/Курсова ООП/HotelInformalSystem/src/components/Reservation/ReservationStrategy.ts"],"sourcesContent":["// export interface IReservationStrategy {\n//   Reservation(): void;\n// }\n\n// export class StandartReservation implements IReservationStrategy {\n//   Reservation() {\n//     console.log(\"Резервація стандартного номера\");\n//   }\n// }\n\n// export class MiddleReservation implements IReservationStrategy {\n//   Reservation() {\n//     console.log(\"Резервація середнього номера\");\n//   }\n// }\n\n// export class LuxuryReservation implements IReservationStrategy {\n//   Reservation() {\n//     console.log(\"Резервація люксового номера\");\n//   }\n// }\n\n// export class Room {\n//   protected surname: string;\n//   protected name: string;\n//   protected id: number;\n//   protected city: string;\n//   public Reserv: IReservationStrategy;\n\n//   constructor(\n    // surname: string = \"Fesiuk\",\n    // name: string = \"Andrey\",\n    // id: number = 3434,\n    // city: string = \"Kyiv\",\n//     res: IReservationStrategy = new StandartReservation()\n//   ) {\n//     this.surname = surname;\n//     this.name = name;\n//     this.id = id;\n//     this.city = city;\n//     this.Reserv = res;\n//   }\n\n//   public Reservation() {\n//     this.Reserv.Reservation();\n//   }\n// }\nimport { Guest } from \"../../classes/Guest\";\nimport { Room } from \"../../classes/Room\";\n///Facade\nclass Reservation {\n  protected guest: Guest;\n  protected room: Room;\n\n  /**\n   * Depending on your application's needs, you can provide the Facade with\n   * existing subsystem objects or force the Facade to create them on its own.\n   */\n  constructor(guest?: Guest, room?: Room) {\n    this.guest = guest || new Guest();\n    this.room = room || new Room();\n  }\n\n  /**\n   * The Facade's methods are convenient shortcuts to the sophisticated\n   * functionality of the subsystems. However, clients get only to a fraction\n   * of a subsystem's capabilities.\n   */\n  public Reservaion(): string {\n    let result = \"Facade initializes subsystems:\\n\";\n    result += this.subsystem1.operation1();\n    result += this.subsystem2.operation1();\n    result += \"Facade orders subsystems to perform the action:\\n\";\n    result += this.subsystem1.operationN();\n    result += this.subsystem2.operationZ();\n\n    return result;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACI;AACA;AACA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAASA,KAAK,QAAQ,qBAAqB;AAC3C,SAASC,IAAI,QAAQ,oBAAoB;AACzC;AACA,MAAMC,WAAW,CAAC;EAIhB;AACF;AACA;AACA;EACEC,WAAWA,CAACC,KAAa,EAAEC,IAAW,EAAE;IAAA,KAP9BD,KAAK;IAAA,KACLC,IAAI;IAOZ,IAAI,CAACD,KAAK,GAAGA,KAAK,IAAI,IAAIJ,KAAK,CAAC,CAAC;IACjC,IAAI,CAACK,IAAI,GAAGA,IAAI,IAAI,IAAIJ,IAAI,CAAC,CAAC;EAChC;;EAEA;AACF;AACA;AACA;AACA;EACSK,UAAUA,CAAA,EAAW;IAC1B,IAAIC,MAAM,GAAG,kCAAkC;IAC/CA,MAAM,IAAI,IAAI,CAACC,UAAU,CAACC,UAAU,CAAC,CAAC;IACtCF,MAAM,IAAI,IAAI,CAACG,UAAU,CAACD,UAAU,CAAC,CAAC;IACtCF,MAAM,IAAI,mDAAmD;IAC7DA,MAAM,IAAI,IAAI,CAACC,UAAU,CAACG,UAAU,CAAC,CAAC;IACtCJ,MAAM,IAAI,IAAI,CAACG,UAAU,CAACE,UAAU,CAAC,CAAC;IAEtC,OAAOL,MAAM;EACf;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}