{"ast":null,"code":"const urlJsonEmployee = \"http://localhost:4000/workers\";\nexport class Employee {\n  constructor(employeeId, name, position, salary) {\n    let messageAdmin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";\n    this.id = void 0;\n    this.name = void 0;\n    this.position = void 0;\n    this.salary = void 0;\n    this.messageAdmin = void 0;\n    this.name = name;\n    this.id = employeeId;\n    this.position = position;\n    this.salary = salary;\n    this.messageAdmin = messageAdmin;\n  }\n  getName() {\n    return this.name;\n  }\n  getEmployeeId() {\n    return this.id;\n  }\n  getPosition() {\n    return this.position;\n  }\n  getSalary() {\n    return this.salary;\n  }\n  getMessage() {\n    return this.messageAdmin;\n  }\n  calculatePay() {\n    // Метод для розрахунку заробітної плати\n    // Реалізація цього методу залежить від конкретних правил готелю\n    return this.salary;\n  }\n  addWorker(newEmployee) {\n    // console.log(`${workerName} прийнятий на роботу`);\n    // this.ListWorkers.push(workerName, position);\n    fetch(urlJsonEmployee, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newEmployee)\n    }).then(response => response.json()).then(newEmployee => {\n      window.alert(\"Employee added to a database!\");\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n  fireWorker(fireEmployee) {\n    const deleteUrl = `${urlJsonEmployee}/${fireEmployee.id}`;\n    console.log(fireEmployee);\n    fetch(deleteUrl, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => response.json()).then(fireEmployee => {\n      window.alert(\"Employee was fired and deleted from a database!\");\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n}\nexport class CleaningEmployee extends Employee {\n  constructor(name, id, position, salary) {\n    let messageAdmin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";\n    let cleaningArea = arguments.length > 5 ? arguments[5] : undefined;\n    super(id, name, position, salary, messageAdmin);\n    this.cleaningRoomNumbers = [];\n    this.cleaningRoomNumbers = cleaningArea;\n  }\n  getCleaningRoomNumbers() {\n    return this.cleaningRoomNumbers;\n  }\n  quickCleaning() {\n    //\n  }\n}\nexport function getWorker(workerId) {\n  return fetch(urlJsonEmployee).then(response => response.json()).then(data => {\n    console.log(data);\n    console.log(workerId);\n    const employees = data.filter(employee => employee.id === workerId); // Assuming the response directly contains the room data\n    console.log(employees);\n    return employees;\n  }).catch(error => {\n    console.error(error);\n  });\n  // return employee.then((empl) => {\n  //   return new Employee(empl.name,empl.id,empl.position,empl.salary);\n  // });\n}","map":{"version":3,"names":["urlJsonEmployee","Employee","constructor","employeeId","name","position","salary","messageAdmin","arguments","length","undefined","id","getName","getEmployeeId","getPosition","getSalary","getMessage","calculatePay","addWorker","newEmployee","fetch","method","headers","body","JSON","stringify","then","response","json","window","alert","catch","error","console","fireWorker","fireEmployee","deleteUrl","log","CleaningEmployee","cleaningArea","cleaningRoomNumbers","getCleaningRoomNumbers","quickCleaning","getWorker","workerId","data","employees","filter","employee"],"sources":["/Users/andreyfesiuk/Desktop/Курсова ООП/HotelInformalSystem/src/classes/Employee.ts"],"sourcesContent":["const urlJsonEmployee = \"http://localhost:4000/workers\";\nexport class Employee {\n  private id: number;\n  private name: string;\n  private position: string;\n  private salary: number;\n  private messageAdmin: string;\n\n  constructor(\n    employeeId: number,\n    name: string,\n    position: string,\n    salary: number,\n    messageAdmin: string = \"\"\n  ) {\n    this.name = name;\n    this.id = employeeId;\n    this.position = position;\n    this.salary = salary;\n    this.messageAdmin = messageAdmin;\n  }\n\n  public getName(): string {\n    return this.name;\n  }\n\n  public getEmployeeId(): number {\n    return this.id;\n  }\n\n  public getPosition(): string {\n    return this.position;\n  }\n\n  public getSalary(): number {\n    return this.salary;\n  }\n\n  public getMessage(): string {\n    return this.messageAdmin;\n  }\n\n  public calculatePay(): number {\n    // Метод для розрахунку заробітної плати\n    // Реалізація цього методу залежить від конкретних правил готелю\n    return this.salary;\n  }\n\n  public addWorker(newEmployee: Employee): void {\n    // console.log(`${workerName} прийнятий на роботу`);\n    // this.ListWorkers.push(workerName, position);\n    fetch(urlJsonEmployee, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(newEmployee),\n    })\n      .then((response) => response.json())\n      .then((newEmployee: Employee) => {\n        window.alert(\"Employee added to a database!\");\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }\n  public fireWorker(fireEmployee: Employee): void {\n    const deleteUrl = `${urlJsonEmployee}/${fireEmployee.id}`;\n    console.log(fireEmployee);\n    fetch(deleteUrl, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      }\n    })\n      .then((response) => response.json())\n      .then((fireEmployee: Employee) => {\n        window.alert(\"Employee was fired and deleted from a database!\");\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }\n}\nexport class CleaningEmployee extends Employee {\n  private cleaningRoomNumbers: string[] = [];\n\n  constructor(\n    name: string,\n    id: number,\n    position: string,\n    salary: number,\n    messageAdmin: string = \"\",\n    cleaningArea: string[]\n  ) {\n    super(id,name, position, salary, messageAdmin);\n    this.cleaningRoomNumbers = cleaningArea;\n  }\n\n  public getCleaningRoomNumbers(): string[] {\n    return this.cleaningRoomNumbers;\n  }\n\n  public quickCleaning(): void {\n    //\n  }\n}\nexport function getWorker(workerId: number) {\n  return fetch(urlJsonEmployee)\n    .then((response) => response.json())\n    .then((data) => {\n      console.log(data);\n      console.log(workerId);\n      const employees = data.filter((employee) => employee.id === workerId); // Assuming the response directly contains the room data\n      console.log(employees);\n      return employees;\n    })\n    .catch((error) => {\n      console.error(error);\n    });\n  // return employee.then((empl) => {\n  //   return new Employee(empl.name,empl.id,empl.position,empl.salary);\n  // });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}