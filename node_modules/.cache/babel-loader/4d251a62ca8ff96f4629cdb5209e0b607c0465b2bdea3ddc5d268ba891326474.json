{"ast":null,"code":"//Передбачається функція,яка визначає сімейство схожих алгоритмів оплати і розміщує кожен з них   - Pattern Компонувальник[Strategy]\n\nexport class Composite {\n  constructor() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Andriy\";\n    this.components = [];\n    this.name = void 0;\n    this.amountService = 0;\n    this.name = name;\n  }\n  AddComponent(invoice) {\n    this.components.push(invoice);\n    this.amountService += invoice.getAmount;\n  }\n  addPayment(amount) {\n    for (const invoice of this.components) {\n      console.log(amount);\n      console.log(invoice.getAmount);\n      if (invoice.getAmount < amount) {\n        amount -= invoice.getAmount;\n        invoice.setAmount = 0;\n      } else if (amount === 0) {\n        return;\n      } else {\n        invoice.setAmount = invoice.getAmount - amount;\n        amount = 0;\n      }\n      console.log(amount);\n      console.log(invoice.getAmount);\n    }\n  }\n  issueRefund(amount) {\n    for (const invoice of this.components) {\n      if (amount !== 0) {\n        invoice.setAmount = invoice.getAmount + amount;\n      }\n      amount = 0;\n    }\n  }\n  set setAmount(amount) {\n    this.amountService = amount;\n  }\n  get getAmount() {\n    let sum = 0;\n    for (const invoice of this.components) {\n      sum += invoice.getAmount;\n    }\n    return sum;\n  }\n  print() {\n    for (const invoice of this.components) {\n      invoice.print();\n    }\n  }\n}\nexport class poolPayment {\n  constructor() {\n    let amountDue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 300;\n    let typeService = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Bar';\n    this.amountService = void 0;\n    this.typeService = void 0;\n    this.amountService = amountDue;\n    this.typeService = typeService;\n  }\n  set setAmount(amount) {\n    this.amountService = amount;\n  }\n  get getAmount() {\n    return this.amountService;\n  }\n  addPayment(amount) {\n    this.amountService -= amount;\n    // console.log(\n    //   `Payment of ${amount}$ applied to room with number ${this.numberroom}. Amount due: ${this._amountDue}$`\n    // );\n  }\n\n  issueRefund(amount) {\n    this.amountService += amount;\n    if (this.amountService < 0) {\n      this.amountService = 0;\n    }\n  }\n  print() {\n    console.log('Рахунок за відвідування басейну закріплений за номером вашої кімнати становить');\n  }\n}","map":{"version":3,"names":["Composite","constructor","name","arguments","length","undefined","components","amountService","AddComponent","invoice","push","getAmount","addPayment","amount","console","log","setAmount","issueRefund","sum","print","poolPayment","amountDue","typeService"],"sources":["/Users/andreyfesiuk/Desktop/Курсова ООП/HotelInformalSystem/src/components/Payments/PaymentsStrategy.ts"],"sourcesContent":["//Передбачається функція,яка визначає сімейство схожих алгоритмів оплати і розміщує кожен з них   - Pattern Компонувальник[Strategy]\n\ninterface Component {\n  addPayment(amount: number): void;\n  issueRefund(amount: number): void;\n  get getAmount(): number;\n  set setAmount(amount: number);\n  print(): void;\n}\nexport class Composite implements Component {\n  private components: Component[] = [];\n  private name: string;\n  private amountService: number = 0;\n\n  constructor(name: string = \"Andriy\") {\n    this.name = name;\n  }\n  public AddComponent(invoice: Component): void {\n    this.components.push(invoice);\n    this.amountService += invoice.getAmount;\n  }\n  public addPayment(amount: number): void {\n    for (const invoice of this.components) {\n      console.log(amount);\n      console.log(invoice.getAmount);\n      if (invoice.getAmount < amount) {\n        amount -= invoice.getAmount;\n        invoice.setAmount = 0;\n      } else if (amount === 0) {\n        return;\n      } else {\n        invoice.setAmount = invoice.getAmount - amount;\n        amount = 0;\n      }\n      console.log(amount);\n      console.log(invoice.getAmount);\n    }\n  }\n\n  public issueRefund(amount: number): void {\n    for (const invoice of this.components) {\n      if (amount !== 0) {\n        invoice.setAmount = invoice.getAmount + amount;\n      }\n      amount = 0;\n    }\n  }\n  public set setAmount(amount: number) {\n    this.amountService = amount;\n  }\n  public get getAmount(): number {\n    let sum = 0;\n    for (const invoice of this.components) {\n      sum += invoice.getAmount;\n    }\n    return sum;\n  }\n  public print(): void {\n    for (const invoice of this.components) {\n      invoice.print();\n    }\n  }\n}\n\nexport class poolPayment implements Component {\n  public amountService: number;\n    public typeService:string;\n\n  constructor(amountDue: number = 300,typeService:string='Bar') {\n    this.amountService = amountDue;\n    this.typeService=typeService;\n  }\n  public set setAmount(amount: number) {\n    this.amountService = amount;\n  }\n  public get getAmount(): number {\n    return this.amountService;\n  }\n  public addPayment(amount: number): void {\n    this.amountService -= amount;\n    // console.log(\n    //   `Payment of ${amount}$ applied to room with number ${this.numberroom}. Amount due: ${this._amountDue}$`\n    // );\n  }\n  public issueRefund(amount: number): void {\n    this.amountService += amount;\n    if (this.amountService < 0) {\n      this.amountService = 0;\n    }\n  }\n  public print(): void {\n    console.log('Рахунок за відвідування басейну закріплений за номером вашої кімнати становить');\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}