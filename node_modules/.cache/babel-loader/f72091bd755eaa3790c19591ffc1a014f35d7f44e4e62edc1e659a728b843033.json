{"ast":null,"code":"// export interface IReservationStrategy {\n//   Reservation(): void;\n// }\n\n// export class StandartReservation implements IReservationStrategy {\n//   Reservation() {\n//     console.log(\"Резервація стандартного номера\");\n//   }\n// }\n\n// export class MiddleReservation implements IReservationStrategy {\n//   Reservation() {\n//     console.log(\"Резервація середнього номера\");\n//   }\n// }\n\n// export class LuxuryReservation implements IReservationStrategy {\n//   Reservation() {\n//     console.log(\"Резервація люксового номера\");\n//   }\n// }\n\n// export class Room {\n//   protected surname: string;\n//   protected name: string;\n//   protected id: number;\n//   protected city: string;\n//   public Reserv: IReservationStrategy;\n\n//   constructor(\n// surname: string = \"Fesiuk\",\n// name: string = \"Andrey\",\n// id: number = 3434,\n// city: string = \"Kyiv\",\n//     res: IReservationStrategy = new StandartReservation()\n//   ) {\n//     this.surname = surname;\n//     this.name = name;\n//     this.id = id;\n//     this.city = city;\n//     this.Reserv = res;\n//   }\n\n//   public Reservation() {\n//     this.Reserv.Reservation();\n//   }\n// }\n\nimport { Guest } from \"../../classes/Guest\";\n\n///Facade\nclass Reservation {\n  /**\n   * Depending on your application's needs, you can provide the Facade with\n   * existing subsystem objects or force the Facade to create them on its own.\n   */\n  constructor() {\n    let full_name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Fesiuk_Andrey\";\n    let phoneNumber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"030302032\";\n    let id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 32332;\n    let email = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"den@gmail.com\";\n    let checkInDate = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"2023-06-01\";\n    let checkOutDate = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : \"2023-06-03\";\n    let typeRoom = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : \"Standart\";\n    this.guest = void 0;\n    this.room = void 0;\n    this.typeRoom = void 0;\n    this.checkInDate = void 0;\n    this.checkOutDate = void 0;\n    this.guest = new Guest(id, full_name, email, phoneNumbe);\n    this.checkInDate = checkInDate;\n    this.checkOutDate = checkOutDate;\n    this.typeRoom = typeRoom;\n  }\n  doReservaion() {\n    // let result = \"Facade initializes subsystems:\\n\";\n    // result += this.subsystem1.operation1();\n    // result += this.subsystem2.operation1();\n    // result += \"Facade orders subsystems to perform the action:\\n\";\n    // result += this.subsystem1.operationN();\n    // result += this.subsystem2.operationZ();\n\n    // return result;\n  }\n  checkAvailability() {}\n}","map":{"version":3,"names":["Guest","Reservation","constructor","full_name","arguments","length","undefined","phoneNumber","id","email","checkInDate","checkOutDate","typeRoom","guest","room","phoneNumbe","doReservaion","checkAvailability"],"sources":["/Users/andreyfesiuk/Desktop/Курсова ООП/HotelInformalSystem/src/components/Reservation/ReservationStrategy.ts"],"sourcesContent":["// export interface IReservationStrategy {\n//   Reservation(): void;\n// }\n\n// export class StandartReservation implements IReservationStrategy {\n//   Reservation() {\n//     console.log(\"Резервація стандартного номера\");\n//   }\n// }\n\n// export class MiddleReservation implements IReservationStrategy {\n//   Reservation() {\n//     console.log(\"Резервація середнього номера\");\n//   }\n// }\n\n// export class LuxuryReservation implements IReservationStrategy {\n//   Reservation() {\n//     console.log(\"Резервація люксового номера\");\n//   }\n// }\n\n// export class Room {\n//   protected surname: string;\n//   protected name: string;\n//   protected id: number;\n//   protected city: string;\n//   public Reserv: IReservationStrategy;\n\n//   constructor(\n// surname: string = \"Fesiuk\",\n// name: string = \"Andrey\",\n// id: number = 3434,\n// city: string = \"Kyiv\",\n//     res: IReservationStrategy = new StandartReservation()\n//   ) {\n//     this.surname = surname;\n//     this.name = name;\n//     this.id = id;\n//     this.city = city;\n//     this.Reserv = res;\n//   }\n\n//   public Reservation() {\n//     this.Reserv.Reservation();\n//   }\n// }\n\nimport { Room } from \"../../classes/Room\";\nimport { Guest } from \"../../classes/Guest\";\n\n///Facade\nclass Reservation {\n  protected guest: Guest;\n  protected room: Room;\n  protected typeRoom:string;\n  private checkInDate: string;\n  private checkOutDate: string;\n\n  /**\n   * Depending on your application's needs, you can provide the Facade with\n   * existing subsystem objects or force the Facade to create them on its own.\n   */\n  constructor(\n    full_name: string = \"Fesiuk_Andrey\",\n    phoneNumber: string = \"030302032\",\n    id: number = 32332,\n    email: string = \"den@gmail.com\",\n    checkInDate: string=\"2023-06-01\",\n    checkOutDate: string=\"2023-06-03\",\n    typeRoom:string=\"Standart\"\n  ) {\n    this.guest = new Guest(id,full_name,email,phoneNumbe);\n    this.checkInDate=checkInDate;\n    this.checkOutDate=checkOutDate;\n    this.typeRoom=typeRoom;\n  }\n\n  public doReservaion(): void {\n    // let result = \"Facade initializes subsystems:\\n\";\n    // result += this.subsystem1.operation1();\n    // result += this.subsystem2.operation1();\n    // result += \"Facade orders subsystems to perform the action:\\n\";\n    // result += this.subsystem1.operationN();\n    // result += this.subsystem2.operationZ();\n\n    // return result;\n\n  }\n  public checkAvailability(){\n\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA,SAASA,KAAK,QAAQ,qBAAqB;;AAE3C;AACA,MAAMC,WAAW,CAAC;EAOhB;AACF;AACA;AACA;EACEC,WAAWA,CAAA,EAQT;IAAA,IAPAC,SAAiB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,eAAe;IAAA,IACnCG,WAAmB,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,WAAW;IAAA,IACjCI,EAAU,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IAAA,IAClBK,KAAa,GAAAL,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,eAAe;IAAA,IAC/BM,WAAmB,GAAAN,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAC,YAAY;IAAA,IAChCO,YAAoB,GAAAP,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAC,YAAY;IAAA,IACjCQ,QAAe,GAAAR,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAC,UAAU;IAAA,KAjBlBS,KAAK;IAAA,KACLC,IAAI;IAAA,KACJF,QAAQ;IAAA,KACVF,WAAW;IAAA,KACXC,YAAY;IAelB,IAAI,CAACE,KAAK,GAAG,IAAIb,KAAK,CAACQ,EAAE,EAACL,SAAS,EAACM,KAAK,EAACM,UAAU,CAAC;IACrD,IAAI,CAACL,WAAW,GAACA,WAAW;IAC5B,IAAI,CAACC,YAAY,GAACA,YAAY;IAC9B,IAAI,CAACC,QAAQ,GAACA,QAAQ;EACxB;EAEOI,YAAYA,CAAA,EAAS;IAC1B;IACA;IACA;IACA;IACA;IACA;;IAEA;EAAA;EAGKC,iBAAiBA,CAAA,EAAE,CAE1B;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}