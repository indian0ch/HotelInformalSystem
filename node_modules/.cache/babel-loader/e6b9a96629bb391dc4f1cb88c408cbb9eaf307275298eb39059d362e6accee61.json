{"ast":null,"code":"//Функція оцінки клієнтами якості обслуговування по шкалі 0/10 - Pattern Спостерігач\n\n//Subscribes\n\nexport class ResidentReviews {\n  constructor(nameres, text) {\n    this.nameres = void 0;\n    this.satisfactionLevel = void 0;\n    this.textReview = void 0;\n    this.ListAdmins = void 0;\n    this.a = void 0;\n    this.nameres = nameres;\n    this.textReview = text;\n    this.ListAdmins = [];\n  }\n  get nameResident() {\n    return this.nameres;\n  }\n  get SatisfactionLevelGet() {\n    return this.satisfactionLevel;\n  }\n  get textRevieGet() {\n    return this.textReview;\n  }\n  set SatisfactionLevelSet(value) {\n    this.satisfactionLevel = value;\n    this.notify();\n  }\n  attach(observer) {\n    this.ListAdmins.push(observer);\n  }\n  detach(observer) {\n    const index = this.ListAdmins.indexOf(observer);\n    if (index !== -1) {\n      this.ListAdmins.splice(index, 1);\n    }\n  }\n  notify() {\n    for (const observer of this.ListAdmins) {\n      observer.update(this);\n    }\n  }\n}\n\n//declare the update method used by subjects\n\nexport class HotelAdministration {\n  constructor() {\n    let observerName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Vlad';\n    this.administrationName = void 0;\n    this.administrationName = observerName;\n  }\n  update(subject) {\n    if (subject instanceof ResidentReviews) {\n      const concreteSubject = subject;\n      if (concreteSubject.SatisfactionLevelGet >= 4) {\n        alert(`Адміністратор ${this.administrationName} отримав оцінку від користувача ${concreteSubject.nameResident} стосовно якості обслуговування готелю. Оцінка: ${concreteSubject.SatisfactionLevelGet}. Адміністратор ${this.administrationName} задоволений результатом роботи готелю і вдячний ${concreteSubject.nameResident} за хорошу оцінку!`);\n      } else {\n        alert(`Адміністратор ${this.administrationName} отримав оцінку від користувача ${concreteSubject.nameResident} стосовно якості обслуговування готелю. Оцінка: ${concreteSubject.SatisfactionLevelGet}. Адміністратор ${this.administrationName} просить ${concreteSubject.nameResident} прийняти вибачення і пообіцяв виправити ситуацію!`);\n      }\n    }\n  }\n}","map":{"version":3,"names":["ResidentReviews","constructor","nameres","text","satisfactionLevel","textReview","ListAdmins","a","nameResident","SatisfactionLevelGet","textRevieGet","SatisfactionLevelSet","value","notify","attach","observer","push","detach","index","indexOf","splice","update","HotelAdministration","observerName","arguments","length","undefined","administrationName","subject","concreteSubject","alert"],"sources":["/Users/andreyfesiuk/Desktop/Курсова ООП/HotelInformalSystem/src/components/Review/ReviewObserver.ts"],"sourcesContent":["//Функція оцінки клієнтами якості обслуговування по шкалі 0/10 - Pattern Спостерігач\n\n//Subscribes\nexport interface ISubject {\n  attach(observer: IObserver): void;\n  detach(observer: IObserver): void;\n  notify(): void;\n}\n\nexport class ResidentReviews implements ISubject {\n  private nameres: string;\n  private satisfactionLevel: number;\n  private textReview:string;\n  private ListAdmins: IObserver[];\n\n  constructor(nameres: string,text:string) {\n    this.nameres = nameres;\n    this.textReview=text;\n    this.ListAdmins = [];\n  }\n\n  public get nameResident(): string {\n    return this.nameres;\n  }\n\n  public get SatisfactionLevelGet(): number {\n    return this.satisfactionLevel;\n  }\n  public get textRevieGet(): string {\n    return this.textReview;\n  }\n  public set SatisfactionLevelSet(value: number) {\n    this.satisfactionLevel = value;\n    this.notify();\n  }\n\n  public attach(observer: IObserver) {\n    this.ListAdmins.push(observer);\n  }\n\n  public detach(observer: IObserver) {\n    const index = this.ListAdmins.indexOf(observer);\n    if (index !== -1) {\n      this.ListAdmins.splice(index, 1);\n    }\n  }\n\n  private a\n\n  public notify() {\n    for (const observer of this.ListAdmins) {\n      observer.update(this);\n    }\n  }\n}\n\n//declare the update method used by subjects\nexport interface IObserver {\n  update(subject: ISubject): void;\n}\n\nexport class HotelAdministration implements IObserver {\n  private administrationName: string;\n\n  constructor(observerName: string='Vlad') {\n    this.administrationName = observerName;\n  }\n\n  public update(subject: ISubject) {\n    if (subject instanceof ResidentReviews) {\n      const concreteSubject: ResidentReviews = subject;\n      if (concreteSubject.SatisfactionLevelGet >= 4) {\n        alert(`Адміністратор ${this.administrationName} отримав оцінку від користувача ${concreteSubject.nameResident} стосовно якості обслуговування готелю. Оцінка: ${concreteSubject.SatisfactionLevelGet}. Адміністратор ${this.administrationName} задоволений результатом роботи готелю і вдячний ${concreteSubject.nameResident} за хорошу оцінку!`);\n      } else {\n        alert(`Адміністратор ${this.administrationName} отримав оцінку від користувача ${concreteSubject.nameResident} стосовно якості обслуговування готелю. Оцінка: ${concreteSubject.SatisfactionLevelGet}. Адміністратор ${this.administrationName} просить ${concreteSubject.nameResident} прийняти вибачення і пообіцяв виправити ситуацію!`);\n      }\n    }\n  }\n}\n\n"],"mappings":"AAAA;;AAEA;;AAOA,OAAO,MAAMA,eAAe,CAAqB;EAM/CC,WAAWA,CAACC,OAAe,EAACC,IAAW,EAAE;IAAA,KALjCD,OAAO;IAAA,KACPE,iBAAiB;IAAA,KACjBC,UAAU;IAAA,KACVC,UAAU;IAAA,KAkCVC,CAAC;IA/BP,IAAI,CAACL,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACG,UAAU,GAACF,IAAI;IACpB,IAAI,CAACG,UAAU,GAAG,EAAE;EACtB;EAEA,IAAWE,YAAYA,CAAA,EAAW;IAChC,OAAO,IAAI,CAACN,OAAO;EACrB;EAEA,IAAWO,oBAAoBA,CAAA,EAAW;IACxC,OAAO,IAAI,CAACL,iBAAiB;EAC/B;EACA,IAAWM,YAAYA,CAAA,EAAW;IAChC,OAAO,IAAI,CAACL,UAAU;EACxB;EACA,IAAWM,oBAAoBA,CAACC,KAAa,EAAE;IAC7C,IAAI,CAACR,iBAAiB,GAAGQ,KAAK;IAC9B,IAAI,CAACC,MAAM,CAAC,CAAC;EACf;EAEOC,MAAMA,CAACC,QAAmB,EAAE;IACjC,IAAI,CAACT,UAAU,CAACU,IAAI,CAACD,QAAQ,CAAC;EAChC;EAEOE,MAAMA,CAACF,QAAmB,EAAE;IACjC,MAAMG,KAAK,GAAG,IAAI,CAACZ,UAAU,CAACa,OAAO,CAACJ,QAAQ,CAAC;IAC/C,IAAIG,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACZ,UAAU,CAACc,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;IAClC;EACF;EAIOL,MAAMA,CAAA,EAAG;IACd,KAAK,MAAME,QAAQ,IAAI,IAAI,CAACT,UAAU,EAAE;MACtCS,QAAQ,CAACM,MAAM,CAAC,IAAI,CAAC;IACvB;EACF;AACF;;AAEA;;AAKA,OAAO,MAAMC,mBAAmB,CAAsB;EAGpDrB,WAAWA,CAAA,EAA8B;IAAA,IAA7BsB,YAAoB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAC,MAAM;IAAA,KAF/BG,kBAAkB;IAGxB,IAAI,CAACA,kBAAkB,GAAGJ,YAAY;EACxC;EAEOF,MAAMA,CAACO,OAAiB,EAAE;IAC/B,IAAIA,OAAO,YAAY5B,eAAe,EAAE;MACtC,MAAM6B,eAAgC,GAAGD,OAAO;MAChD,IAAIC,eAAe,CAACpB,oBAAoB,IAAI,CAAC,EAAE;QAC7CqB,KAAK,CAAE,iBAAgB,IAAI,CAACH,kBAAmB,mCAAkCE,eAAe,CAACrB,YAAa,mDAAkDqB,eAAe,CAACpB,oBAAqB,mBAAkB,IAAI,CAACkB,kBAAmB,oDAAmDE,eAAe,CAACrB,YAAa,oBAAmB,CAAC;MACrV,CAAC,MAAM;QACLsB,KAAK,CAAE,iBAAgB,IAAI,CAACH,kBAAmB,mCAAkCE,eAAe,CAACrB,YAAa,mDAAkDqB,eAAe,CAACpB,oBAAqB,mBAAkB,IAAI,CAACkB,kBAAmB,YAAWE,eAAe,CAACrB,YAAa,oDAAmD,CAAC;MAC7U;IACF;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}