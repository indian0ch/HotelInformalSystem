{"ast":null,"code":"// export interface IReservationStrategy {\n//   Reservation(): void;\n// }\n\n// export class StandartReservation implements IReservationStrategy {\n//   Reservation() {\n//     console.log(\"Резервація стандартного номера\");\n//   }\n// }\n\n// export class MiddleReservation implements IReservationStrategy {\n//   Reservation() {\n//     console.log(\"Резервація середнього номера\");\n//   }\n// }\n\n// export class LuxuryReservation implements IReservationStrategy {\n//   Reservation() {\n//     console.log(\"Резервація люксового номера\");\n//   }\n// }\n\n// export class Room {\n//   protected surname: string;\n//   protected name: string;\n//   protected id: number;\n//   protected city: string;\n//   public Reserv: IReservationStrategy;\n\n//   constructor(\n//     surname: string = \"Fesiuk\",\n//     name: string = \"Andrey\",\n//     id: number = 3434,\n//     city: string = \"Kyiv\",\n//     res: IReservationStrategy = new StandartReservation()\n//   ) {\n//     this.surname = surname;\n//     this.name = name;\n//     this.id = id;\n//     this.city = city;\n//     this.Reserv = res;\n//   }\n\n//   public Reservation() {\n//     this.Reserv.Reservation();\n//   }\n// }\nimport { Guest } from \"../../classes/Guest\";\nimport { Room } from \"../../classes/Room\";\n///\nclass Facade {\n  /**\n   * Depending on your application's needs, you can provide the Facade with\n   * existing subsystem objects or force the Facade to create them on its own.\n   */\n  constructor(subsystem1, subsystem2) {\n    this.guest = void 0;\n    this.room = void 0;\n    this.subsystem1 = subsystem1 || new Guest();\n    this.subsystem2 = subsystem2 || new Room();\n  }\n\n  /**\n   * The Facade's methods are convenient shortcuts to the sophisticated\n   * functionality of the subsystems. However, clients get only to a fraction\n   * of a subsystem's capabilities.\n   */\n  Reservaion() {\n    let result = \"Facade initializes subsystems:\\n\";\n    result += this.subsystem1.operation1();\n    result += this.subsystem2.operation1();\n    result += \"Facade orders subsystems to perform the action:\\n\";\n    result += this.subsystem1.operationN();\n    result += this.subsystem2.operationZ();\n    return result;\n  }\n}\n\n/**\n * The Subsystem can accept requests either from the facade or client directly.\n * In any case, to the Subsystem, the Facade is yet another client, and it's not\n * a part of the Subsystem.\n */\nclass Subsystem1 {\n  operation1() {\n    return \"Subsystem1: Ready!\\n\";\n  }\n\n  // ...\n\n  operationN() {\n    return \"Subsystem1: Go!\\n\";\n  }\n}\n\n/**\n * Some facades can work with multiple subsystems at the same time.\n */\nclass Subsystem2 {\n  operation1() {\n    return \"Subsystem2: Get ready!\\n\";\n  }\n\n  // ...\n\n  operationZ() {\n    return \"Subsystem2: Fire!\";\n  }\n}","map":{"version":3,"names":["Guest","Room","Facade","constructor","subsystem1","subsystem2","guest","room","Reservaion","result","operation1","operationN","operationZ","Subsystem1","Subsystem2"],"sources":["/Users/andreyfesiuk/Desktop/Курсова ООП/HotelInformalSystem/src/components/Reservation/ReservationStrategy.ts"],"sourcesContent":["// export interface IReservationStrategy {\n//   Reservation(): void;\n// }\n\n// export class StandartReservation implements IReservationStrategy {\n//   Reservation() {\n//     console.log(\"Резервація стандартного номера\");\n//   }\n// }\n\n// export class MiddleReservation implements IReservationStrategy {\n//   Reservation() {\n//     console.log(\"Резервація середнього номера\");\n//   }\n// }\n\n// export class LuxuryReservation implements IReservationStrategy {\n//   Reservation() {\n//     console.log(\"Резервація люксового номера\");\n//   }\n// }\n\n// export class Room {\n//   protected surname: string;\n//   protected name: string;\n//   protected id: number;\n//   protected city: string;\n//   public Reserv: IReservationStrategy;\n\n//   constructor(\n//     surname: string = \"Fesiuk\",\n//     name: string = \"Andrey\",\n//     id: number = 3434,\n//     city: string = \"Kyiv\",\n//     res: IReservationStrategy = new StandartReservation()\n//   ) {\n//     this.surname = surname;\n//     this.name = name;\n//     this.id = id;\n//     this.city = city;\n//     this.Reserv = res;\n//   }\n\n//   public Reservation() {\n//     this.Reserv.Reservation();\n//   }\n// }\nimport { Guest } from \"../../classes/Guest\";\nimport { Room } from \"../../classes/Room\";\n///\nclass Facade {\n  protected guest: Guest;\n\n  protected room: Room;\n\n  /**\n   * Depending on your application's needs, you can provide the Facade with\n   * existing subsystem objects or force the Facade to create them on its own.\n   */\n  constructor(subsystem1?: Guest, subsystem2?: Room) {\n    this.subsystem1 = subsystem1 || new Guest();\n    this.subsystem2 = subsystem2 || new Room();\n  }\n\n  /**\n   * The Facade's methods are convenient shortcuts to the sophisticated\n   * functionality of the subsystems. However, clients get only to a fraction\n   * of a subsystem's capabilities.\n   */\n  public Reservaion(): string {\n    let result = \"Facade initializes subsystems:\\n\";\n    result += this.subsystem1.operation1();\n    result += this.subsystem2.operation1();\n    result += \"Facade orders subsystems to perform the action:\\n\";\n    result += this.subsystem1.operationN();\n    result += this.subsystem2.operationZ();\n\n    return result;\n  }\n}\n\n/**\n * The Subsystem can accept requests either from the facade or client directly.\n * In any case, to the Subsystem, the Facade is yet another client, and it's not\n * a part of the Subsystem.\n */\nclass Subsystem1 {\n  public operation1(): string {\n    return \"Subsystem1: Ready!\\n\";\n  }\n\n  // ...\n\n  public operationN(): string {\n    return \"Subsystem1: Go!\\n\";\n  }\n}\n\n/**\n * Some facades can work with multiple subsystems at the same time.\n */\nclass Subsystem2 {\n  public operation1(): string {\n    return \"Subsystem2: Get ready!\\n\";\n  }\n\n  // ...\n\n  public operationZ(): string {\n    return \"Subsystem2: Fire!\";\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAASA,KAAK,QAAQ,qBAAqB;AAC3C,SAASC,IAAI,QAAQ,oBAAoB;AACzC;AACA,MAAMC,MAAM,CAAC;EAKX;AACF;AACA;AACA;EACEC,WAAWA,CAACC,UAAkB,EAAEC,UAAiB,EAAE;IAAA,KARzCC,KAAK;IAAA,KAELC,IAAI;IAOZ,IAAI,CAACH,UAAU,GAAGA,UAAU,IAAI,IAAIJ,KAAK,CAAC,CAAC;IAC3C,IAAI,CAACK,UAAU,GAAGA,UAAU,IAAI,IAAIJ,IAAI,CAAC,CAAC;EAC5C;;EAEA;AACF;AACA;AACA;AACA;EACSO,UAAUA,CAAA,EAAW;IAC1B,IAAIC,MAAM,GAAG,kCAAkC;IAC/CA,MAAM,IAAI,IAAI,CAACL,UAAU,CAACM,UAAU,CAAC,CAAC;IACtCD,MAAM,IAAI,IAAI,CAACJ,UAAU,CAACK,UAAU,CAAC,CAAC;IACtCD,MAAM,IAAI,mDAAmD;IAC7DA,MAAM,IAAI,IAAI,CAACL,UAAU,CAACO,UAAU,CAAC,CAAC;IACtCF,MAAM,IAAI,IAAI,CAACJ,UAAU,CAACO,UAAU,CAAC,CAAC;IAEtC,OAAOH,MAAM;EACf;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMI,UAAU,CAAC;EACRH,UAAUA,CAAA,EAAW;IAC1B,OAAO,sBAAsB;EAC/B;;EAEA;;EAEOC,UAAUA,CAAA,EAAW;IAC1B,OAAO,mBAAmB;EAC5B;AACF;;AAEA;AACA;AACA;AACA,MAAMG,UAAU,CAAC;EACRJ,UAAUA,CAAA,EAAW;IAC1B,OAAO,0BAA0B;EACnC;;EAEA;;EAEOE,UAAUA,CAAA,EAAW;IAC1B,OAAO,mBAAmB;EAC5B;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}