{"ast":null,"code":"// export interface IReservationStrategy {\n//   Reservation(): void;\n// }\n\n// export class StandartReservation implements IReservationStrategy {\n//   Reservation() {\n//     console.log(\"Резервація стандартного номера\");\n//   }\n// }\n\n// export class MiddleReservation implements IReservationStrategy {\n//   Reservation() {\n//     console.log(\"Резервація середнього номера\");\n//   }\n// }\n\n// export class LuxuryReservation implements IReservationStrategy {\n//   Reservation() {\n//     console.log(\"Резервація люксового номера\");\n//   }\n// }\n\n// export class Room {\n//   protected surname: string;\n//   protected name: string;\n//   protected id: number;\n//   protected city: string;\n//   public Reserv: IReservationStrategy;\n\n//   constructor(\n// surname: string = \"Fesiuk\",\n// name: string = \"Andrey\",\n// id: number = 3434,\n// city: string = \"Kyiv\",\n//     res: IReservationStrategy = new StandartReservation()\n//   ) {\n//     this.surname = surname;\n//     this.name = name;\n//     this.id = id;\n//     this.city = city;\n//     this.Reserv = res;\n//   }\n\n//   public Reservation() {\n//     this.Reserv.Reservation();\n//   }\n// }\n\nimport { getRooms } from \"../../classes/Room.ts\";\nimport { Guest } from \"../../classes/Guest.ts\";\n\n///Facade\nexport class ReservationRoom {\n  /**\n   * Depending on your application's needs, you can provide the Facade with\n   * existing subsystem objects or force the Facade to create them on its own.\n   */\n  constructor() {\n    let full_name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Fesiuk_Andrey\";\n    let phoneNumbe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"030302032\";\n    let id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 32335552;\n    let email = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"den@gmail.com\";\n    let checkInDate = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"2023-06-01\";\n    let checkOutDate = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : \"2023-06-03\";\n    let typeRoom = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 100;\n    this.guest = void 0;\n    this.room = void 0;\n    this.typeRoom = void 0;\n    this.checkInDate = void 0;\n    this.checkOutDate = void 0;\n    this.guest = new Guest(id, full_name, email, phoneNumbe);\n    this.checkInDate = checkInDate;\n    this.checkOutDate = checkOutDate;\n    this.typeRoom = typeRoom;\n  }\n  async doReservation() {\n    console.log(this.guest);\n    let available = await this.checkAvailability();\n    if (typeof available !== \"string\") {\n      console.log(available.id);\n      available.checkInDate = this.checkInDate;\n      available.checkOutDate = this.checkOutDate;\n      available.guestId = thi;\n      // this.guest.postGuest(this.guest);\n      // modifyRoom(available);\n    } else {\n      console.log(\"Check 2\");\n      window.alert(\"No one room with such parametr available!\");\n    }\n  }\n  async checkAvailability() {\n    let roomArr = await getRooms().then(roomArr => {\n      return roomArr;\n    });\n    console.log(roomArr);\n    const roomArra = roomArr.filter(room => room.guestId === null && room.pricePerNight === this.typeRoom);\n    console.log(roomArra[0]);\n    if (roomArra.length !== 0) {\n      return roomArra[0];\n    } else {\n      return \"No\";\n    }\n  }\n}\n// try {\n//   const roomArr = await getRooms();\n//   const availableRooms = roomArr.filter(\n//     (room) => room.guestId === null && room.pricePerNight === this.typeRoom\n//   );\n\n//   if (availableRooms.length > 0) {\n//     return availableRooms[0];\n//   } else {\n//     return \"No\";\n//   }\n// } catch (error) {\n//   console.error(error);\n//   throw new Error(\"An error occurred while checking room availability.\");\n// }","map":{"version":3,"names":["getRooms","Guest","ReservationRoom","constructor","full_name","arguments","length","undefined","phoneNumbe","id","email","checkInDate","checkOutDate","typeRoom","guest","room","doReservation","console","log","available","checkAvailability","guestId","thi","window","alert","roomArr","then","roomArra","filter","pricePerNight"],"sources":["/Users/andreyfesiuk/Desktop/Курсова ООП/HotelInformalSystem/src/components/Reservation/ReservationStrategy.ts"],"sourcesContent":["// export interface IReservationStrategy {\n//   Reservation(): void;\n// }\n\n// export class StandartReservation implements IReservationStrategy {\n//   Reservation() {\n//     console.log(\"Резервація стандартного номера\");\n//   }\n// }\n\n// export class MiddleReservation implements IReservationStrategy {\n//   Reservation() {\n//     console.log(\"Резервація середнього номера\");\n//   }\n// }\n\n// export class LuxuryReservation implements IReservationStrategy {\n//   Reservation() {\n//     console.log(\"Резервація люксового номера\");\n//   }\n// }\n\n// export class Room {\n//   protected surname: string;\n//   protected name: string;\n//   protected id: number;\n//   protected city: string;\n//   public Reserv: IReservationStrategy;\n\n//   constructor(\n// surname: string = \"Fesiuk\",\n// name: string = \"Andrey\",\n// id: number = 3434,\n// city: string = \"Kyiv\",\n//     res: IReservationStrategy = new StandartReservation()\n//   ) {\n//     this.surname = surname;\n//     this.name = name;\n//     this.id = id;\n//     this.city = city;\n//     this.Reserv = res;\n//   }\n\n//   public Reservation() {\n//     this.Reserv.Reservation();\n//   }\n// }\n\nimport { Room, getRooms, modifyRoom } from \"../../classes/Room.ts\";\nimport { Guest } from \"../../classes/Guest.ts\";\n\n///Facade\nexport class ReservationRoom {\n  protected guest: Guest;\n  protected room: Room;\n  protected typeRoom: number;\n  private checkInDate: string;\n  private checkOutDate: string;\n\n  /**\n   * Depending on your application's needs, you can provide the Facade with\n   * existing subsystem objects or force the Facade to create them on its own.\n   */\n  constructor(\n    full_name: string = \"Fesiuk_Andrey\",\n    phoneNumbe: string = \"030302032\",\n    id: number = 32335552,\n    email: string = \"den@gmail.com\",\n    checkInDate: string = \"2023-06-01\",\n    checkOutDate: string = \"2023-06-03\",\n    typeRoom: number = 100\n  ) {\n    this.guest = new Guest(id, full_name, email, phoneNumbe);\n    this.checkInDate = checkInDate;\n    this.checkOutDate = checkOutDate;\n    this.typeRoom = typeRoom;\n  }\n\n  public async doReservation() {\n    console.log(this.guest);\n    let available = await this.checkAvailability();\n    if (typeof available !== \"string\") {\n      console.log(available.id);\n      available.checkInDate=this.checkInDate;\n      available.checkOutDate=this.checkOutDate;\n      available.guestId=thi\n      // this.guest.postGuest(this.guest);\n      // modifyRoom(available);\n    } else {\n      console.log(\"Check 2\");\n      window.alert(\"No one room with such parametr available!\");\n    }\n  }\n  public async checkAvailability() {\n    let roomArr = await getRooms().then((roomArr) => {\n      return roomArr;\n    });\n    console.log(roomArr);\n    const roomArra = roomArr.filter(\n      (room) => room.guestId === null && room.pricePerNight === this.typeRoom\n    );\n    console.log(roomArra[0]);\n    if (roomArra.length !== 0) {\n      return roomArra[0];\n    } else {\n      return \"No\";\n    }\n  }\n}\n// try {\n//   const roomArr = await getRooms();\n//   const availableRooms = roomArr.filter(\n//     (room) => room.guestId === null && room.pricePerNight === this.typeRoom\n//   );\n\n//   if (availableRooms.length > 0) {\n//     return availableRooms[0];\n//   } else {\n//     return \"No\";\n//   }\n// } catch (error) {\n//   console.error(error);\n//   throw new Error(\"An error occurred while checking room availability.\");\n// }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}