{"ast":null,"code":"//Передбачається функція,яка визначає сімейство схожих алгоритмів оплати і розміщує кожен з них у власному класі)  - Pattern Стратегія[Strategy]\n\n// interface PaymentStrategy {\n//   pay(amount: number): void;\n// }\n\n// export class CashPaymentStrategy implements PaymentStrategy {\n//   pay(amount: number): void {\n//     alert(`Payment of ${amount} by cash.`);\n//   }\n// }\n\n// export class CreditCardPaymentStrategy implements PaymentStrategy {\n//   private cardNumber: string;\n//   private cardExpiration: string;\n//   private cardCVV: string;\n\n//   constructor(cardNumber: string, cardExpiration: string, cardCVV: string) {\n//     this.cardNumber = cardNumber;\n//     this.cardExpiration = cardExpiration;\n//     this.cardCVV = cardCVV;\n//   }\n\n//   pay(amount: number): void {\n//     alert(`Payment of ${amount} by credit card: ${this.cardNumber}.`);\n//   }\n// }\n\n// export class PayPalPaymentStrategy implements PaymentStrategy {\n//   private paypalUsername: string;\n//   private paypalPassword: string;\n\n//   constructor(paypalUsername: string, paypalPassword: string) {\n//     this.paypalUsername = paypalUsername;\n//     this.paypalPassword = paypalPassword;\n//   }\n\n//   pay(amount: number): void {\n//     alert(\n//       `Payment of ${amount} via PayPal with username: ${this.paypalUsername}.`\n//     );\n//   }\n// }\n\nexport class CashPaymentStrategy {\n  pay(amount) {\n    alert(`Payment of ${amount} by cash.`);\n  }\n}","map":{"version":3,"names":["CashPaymentStrategy","pay","amount","alert"],"sources":["/Users/andreyfesiuk/Desktop/Курсова ООП/HotelInformalSystem/src/components/Payments/PaymentsStrategy.ts"],"sourcesContent":["//Передбачається функція,яка визначає сімейство схожих алгоритмів оплати і розміщує кожен з них у власному класі)  - Pattern Стратегія[Strategy]\n\n// interface PaymentStrategy {\n//   pay(amount: number): void;\n// }\n\n// export class CashPaymentStrategy implements PaymentStrategy {\n//   pay(amount: number): void {\n//     alert(`Payment of ${amount} by cash.`);\n//   }\n// }\n\n// export class CreditCardPaymentStrategy implements PaymentStrategy {\n//   private cardNumber: string;\n//   private cardExpiration: string;\n//   private cardCVV: string;\n\n//   constructor(cardNumber: string, cardExpiration: string, cardCVV: string) {\n//     this.cardNumber = cardNumber;\n//     this.cardExpiration = cardExpiration;\n//     this.cardCVV = cardCVV;\n//   }\n\n//   pay(amount: number): void {\n//     alert(`Payment of ${amount} by credit card: ${this.cardNumber}.`);\n//   }\n// }\n\n// export class PayPalPaymentStrategy implements PaymentStrategy {\n//   private paypalUsername: string;\n//   private paypalPassword: string;\n\n//   constructor(paypalUsername: string, paypalPassword: string) {\n//     this.paypalUsername = paypalUsername;\n//     this.paypalPassword = paypalPassword;\n//   }\n\n//   pay(amount: number): void {\n//     alert(\n//       `Payment of ${amount} via PayPal with username: ${this.paypalUsername}.`\n//     );\n//   }\n// }\ninterface Payment {\n  pay(amount: number): void;\n}\nexport class CashPaymentStrategy implements PaymentStrategy {\n  pay(amount: number): void {\n    alert(`Payment of ${amount} by cash.`);\n  }\n}"],"mappings":"AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA,OAAO,MAAMA,mBAAmB,CAA4B;EAC1DC,GAAGA,CAACC,MAAc,EAAQ;IACxBC,KAAK,CAAE,cAAaD,MAAO,WAAU,CAAC;EACxC;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}