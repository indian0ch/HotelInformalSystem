{"ast":null,"code":"//Передбачається функція реєстрації/логіну для персоналу готелю з метою входу у свій особистий кабінет - Pattern Одинак[Singleton]\n//Transfers the registration/login function for hotel staff with land access to their personal account - Pattern [Singleton]\n\n// Worker class\n// export class Worker {\n//   private username: string;\n//   private password: string;\n//   private hours: number;\n//   private roomToClean: number | null;\n\n//   constructor(username: string, password: string) {\n//     this.username = username;\n//     this.password = password;\n//     this.hours = 10;\n//     this.roomToClean = null;\n//   }\n\n//   public setRandomHours(minHours: number, maxHours: number): void {\n//     this.hours =\n//       Math.floor(Math.random() * (maxHours - minHours + 1)) + minHours;\n//   }\n\n//   public assignRoomToClean(roomNumber: number): void {\n//     this.roomToClean = roomNumber;\n//   }\n\n//   public cleanRoom(): void {\n//     if (this.roomToClean !== null) {\n//       console.log(\n//         `Worker ${this.username} is cleaning room ${this.roomToClean}.`\n//       );\n//       // Perform cleaning operations\n//       this.roomToClean = null; // Reset assigned room\n//     } else {\n//       console.log(\"No room assigned to clean.\");\n//     }\n//   }\n\n//   public getHours(): number {\n//     return this.hours;\n//   }\n\n//   public getPassword(): string {\n//     return this.password;\n//   }\n//   public getUsername(): string {\n//     return this.username;\n//   }\n\n//   public getRoomToClean(): number | null {\n//     return this.roomToClean;\n//   }\n// }\n\n// Authentication service\nexport class AuthenticationService {\n  constructor() {\n    this.users = void 0;\n    this.lastLogin = void 0;\n    this.users = [];\n  }\n  static getInstance() {\n    if (!AuthenticationService.instance) {\n      AuthenticationService.instance = new AuthenticationService();\n    }\n    return AuthenticationService.instance;\n  }\n  register(username, password) {\n    const newUser = new Worker(username, password);\n    this.users.push(newUser);\n    console.log(`User \"${username}\" registered successfully!`);\n  }\n  login(username, password) {\n    //delete\n    const newUser = new Worker(username, password);\n    this.users.push(newUser);\n    const user = this.users.find(person => person.getUsername() === username && person.getPassword() === password);\n    if (user) {\n      console.log(`User \"${username}\" logged in successfully!`);\n      this.lastLogin = username;\n    } else {\n      console.log(`Invalid credentials. Please try again!`);\n    }\n  }\n  getLastLogin() {\n    return this.lastLogin;\n  }\n  getUsers() {\n    return this.users;\n  }\n  logout(username) {\n    console.log(`User \"${username}\" logged out successfully!`);\n    this.lastLogin = null;\n  }\n}\nAuthenticationService.instance = void 0;","map":{"version":3,"names":["AuthenticationService","constructor","users","lastLogin","getInstance","instance","register","username","password","newUser","Worker","push","console","log","login","user","find","person","getUsername","getPassword","getLastLogin","getUsers","logout"],"sources":["/Users/andreyfesiuk/Desktop/Курсова ООП/HotelInformalSystem/src/components/Authentication/AuthenticationSingleton.ts"],"sourcesContent":["//Передбачається функція реєстрації/логіну для персоналу готелю з метою входу у свій особистий кабінет - Pattern Одинак[Singleton]\n//Transfers the registration/login function for hotel staff with land access to their personal account - Pattern [Singleton]\n\n// Worker class\n// export class Worker {\n//   private username: string;\n//   private password: string;\n//   private hours: number;\n//   private roomToClean: number | null;\n\n//   constructor(username: string, password: string) {\n//     this.username = username;\n//     this.password = password;\n//     this.hours = 10;\n//     this.roomToClean = null;\n//   }\n\n//   public setRandomHours(minHours: number, maxHours: number): void {\n//     this.hours =\n//       Math.floor(Math.random() * (maxHours - minHours + 1)) + minHours;\n//   }\n\n//   public assignRoomToClean(roomNumber: number): void {\n//     this.roomToClean = roomNumber;\n//   }\n\n//   public cleanRoom(): void {\n//     if (this.roomToClean !== null) {\n//       console.log(\n//         `Worker ${this.username} is cleaning room ${this.roomToClean}.`\n//       );\n//       // Perform cleaning operations\n//       this.roomToClean = null; // Reset assigned room\n//     } else {\n//       console.log(\"No room assigned to clean.\");\n//     }\n//   }\n\n//   public getHours(): number {\n//     return this.hours;\n//   }\n\n//   public getPassword(): string {\n//     return this.password;\n//   }\n//   public getUsername(): string {\n//     return this.username;\n//   }\n\n//   public getRoomToClean(): number | null {\n//     return this.roomToClean;\n//   }\n// }\n\n// Authentication service\nexport class AuthenticationService {\n  private static instance: AuthenticationService;\n  private users: Worker[];\n  private lastLogin: string;\n\n  private constructor() {\n    this.users = [];\n  }\n\n  static getInstance(): AuthenticationService {\n    if (!AuthenticationService.instance) {\n      AuthenticationService.instance = new AuthenticationService();\n    }\n    return AuthenticationService.instance;\n  }\n\n  register(username: string, password: string): void {\n    const newUser = new Worker(username, password);\n    this.users.push(newUser);\n    console.log(`User \"${username}\" registered successfully!`);\n  }\n\n  login(username: string, password: string): void {\n    //delete\n    const newUser = new Worker(username, password);\n    this.users.push(newUser);\n    const user = this.users.find(\n      (person) =>\n        person.getUsername() === username && person.getPassword() === password\n    );\n    if (user) {\n      console.log(`User \"${username}\" logged in successfully!`);\n      this.lastLogin = username;\n    } else {\n      console.log(`Invalid credentials. Please try again!`);\n    }\n  }\n  public getLastLogin() {\n    return this.lastLogin;\n  }\n\n  public getUsers() {\n    return this.users;\n  }\n\n  logout(username: string): void {\n    console.log(`User \"${username}\" logged out successfully!`);\n    this.lastLogin = null;\n  }\n}\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,OAAO,MAAMA,qBAAqB,CAAC;EAKzBC,WAAWA,CAAA,EAAG;IAAA,KAHdC,KAAK;IAAA,KACLC,SAAS;IAGf,IAAI,CAACD,KAAK,GAAG,EAAE;EACjB;EAEA,OAAOE,WAAWA,CAAA,EAA0B;IAC1C,IAAI,CAACJ,qBAAqB,CAACK,QAAQ,EAAE;MACnCL,qBAAqB,CAACK,QAAQ,GAAG,IAAIL,qBAAqB,CAAC,CAAC;IAC9D;IACA,OAAOA,qBAAqB,CAACK,QAAQ;EACvC;EAEAC,QAAQA,CAACC,QAAgB,EAAEC,QAAgB,EAAQ;IACjD,MAAMC,OAAO,GAAG,IAAIC,MAAM,CAACH,QAAQ,EAAEC,QAAQ,CAAC;IAC9C,IAAI,CAACN,KAAK,CAACS,IAAI,CAACF,OAAO,CAAC;IACxBG,OAAO,CAACC,GAAG,CAAE,SAAQN,QAAS,4BAA2B,CAAC;EAC5D;EAEAO,KAAKA,CAACP,QAAgB,EAAEC,QAAgB,EAAQ;IAC9C;IACA,MAAMC,OAAO,GAAG,IAAIC,MAAM,CAACH,QAAQ,EAAEC,QAAQ,CAAC;IAC9C,IAAI,CAACN,KAAK,CAACS,IAAI,CAACF,OAAO,CAAC;IACxB,MAAMM,IAAI,GAAG,IAAI,CAACb,KAAK,CAACc,IAAI,CACzBC,MAAM,IACLA,MAAM,CAACC,WAAW,CAAC,CAAC,KAAKX,QAAQ,IAAIU,MAAM,CAACE,WAAW,CAAC,CAAC,KAAKX,QAClE,CAAC;IACD,IAAIO,IAAI,EAAE;MACRH,OAAO,CAACC,GAAG,CAAE,SAAQN,QAAS,2BAA0B,CAAC;MACzD,IAAI,CAACJ,SAAS,GAAGI,QAAQ;IAC3B,CAAC,MAAM;MACLK,OAAO,CAACC,GAAG,CAAE,wCAAuC,CAAC;IACvD;EACF;EACOO,YAAYA,CAAA,EAAG;IACpB,OAAO,IAAI,CAACjB,SAAS;EACvB;EAEOkB,QAAQA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACnB,KAAK;EACnB;EAEAoB,MAAMA,CAACf,QAAgB,EAAQ;IAC7BK,OAAO,CAACC,GAAG,CAAE,SAAQN,QAAS,4BAA2B,CAAC;IAC1D,IAAI,CAACJ,SAAS,GAAG,IAAI;EACvB;AACF;AAjDaH,qBAAqB,CACjBK,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}