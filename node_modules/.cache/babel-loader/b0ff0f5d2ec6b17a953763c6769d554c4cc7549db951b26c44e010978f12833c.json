{"ast":null,"code":"//Передбачається функція реєстрації/логіну для персоналу готелю з метою входу у свій особистий кабінет - Pattern Одинак[Singleton]\n//Transfers the registration/login function for hotel staff with land access to their personal account - Pattern [Singleton]\nimport { getWorkerById } from \"../../classes/Employee.ts\";\nconst urlJsonEmployee = \"http://localhost:4000/workers\";\n// Worker class\n// export class Worker {\n//   private username: string;\n//   private password: string;\n//   private hours: number;\n//   private roomToClean: number | null;\n\n//   constructor(username: string, password: string) {\n//     this.username = username;\n//     this.password = password;\n//     this.hours = 10;\n//     this.roomToClean = null;\n//   }\n\n//   public setRandomHours(minHours: number, maxHours: number): void {\n//     this.hours =\n//       Math.floor(Math.random() * (maxHours - minHours + 1)) + minHours;\n//   }\n\n//   public assignRoomToClean(roomNumber: number): void {\n//     this.roomToClean = roomNumber;\n//   }\n\n//   public cleanRoom(): void {\n//     if (this.roomToClean !== null) {\n//       console.log(\n//         `Worker ${this.username} is cleaning room ${this.roomToClean}.`\n//       );\n//       // Perform cleaning operations\n//       this.roomToClean = null; // Reset assigned room\n//     } else {\n//       console.log(\"No room assigned to clean.\");\n//     }\n//   }\n\n//   public getHours(): number {\n//     return this.hours;\n//   }\n\n//   public getPassword(): string {\n//     return this.password;\n//   }\n//   public getUsername(): string {\n//     return this.username;\n//   }\n\n//   public getRoomToClean(): number | null {\n//     return this.roomToClean;\n//   }\n// }\n\n// Authentication service\nexport class AuthenticationService {\n  constructor() {\n    this.worker = void 0;\n    this.status = void 0;\n    this.status;\n  }\n  static getInstance() {\n    if (!AuthenticationService.instance) {\n      AuthenticationService.instance = new AuthenticationService();\n    }\n    return AuthenticationService.instance;\n  }\n\n  // register(username: string, password: string): void {\n  //   const newUser = new Worker(username, password);\n  //   this.users.push(newUser);\n  //   console.log(`User \"${username}\" registered successfully!`);\n  // }\n\n  async login(workerId, name) {\n    let workerObject = await getWorkerById(workerId).then(employee => {\n      return employee;\n    });\n    if (workerObject.length !== 0) {\n      if (workerObject[0].status === true) {\n        alert(`User \"${name}\" logged in successfully!`);\n      }\n    }\n  }\n  getWorker() {\n    return this.worker;\n  }\n  logout(username) {\n    console.log(`User \"${username}\" logged out successfully!`);\n    this.lastLogin = null;\n  }\n}\nAuthenticationService.instance = void 0;","map":{"version":3,"names":["getWorkerById","urlJsonEmployee","AuthenticationService","constructor","worker","status","getInstance","instance","login","workerId","name","workerObject","then","employee","length","alert","getWorker","logout","username","console","log","lastLogin"],"sources":["/Users/andreyfesiuk/Desktop/Курсова ООП/HotelInformalSystem/src/components/Authentication/AuthenticationSingleton.ts"],"sourcesContent":["//Передбачається функція реєстрації/логіну для персоналу готелю з метою входу у свій особистий кабінет - Pattern Одинак[Singleton]\n//Transfers the registration/login function for hotel staff with land access to their personal account - Pattern [Singleton]\nimport { Employee, getWorkerById } from \"../../classes/Employee.ts\";\nconst urlJsonEmployee = \"http://localhost:4000/workers\";\n// Worker class\n// export class Worker {\n//   private username: string;\n//   private password: string;\n//   private hours: number;\n//   private roomToClean: number | null;\n\n//   constructor(username: string, password: string) {\n//     this.username = username;\n//     this.password = password;\n//     this.hours = 10;\n//     this.roomToClean = null;\n//   }\n\n//   public setRandomHours(minHours: number, maxHours: number): void {\n//     this.hours =\n//       Math.floor(Math.random() * (maxHours - minHours + 1)) + minHours;\n//   }\n\n//   public assignRoomToClean(roomNumber: number): void {\n//     this.roomToClean = roomNumber;\n//   }\n\n//   public cleanRoom(): void {\n//     if (this.roomToClean !== null) {\n//       console.log(\n//         `Worker ${this.username} is cleaning room ${this.roomToClean}.`\n//       );\n//       // Perform cleaning operations\n//       this.roomToClean = null; // Reset assigned room\n//     } else {\n//       console.log(\"No room assigned to clean.\");\n//     }\n//   }\n\n//   public getHours(): number {\n//     return this.hours;\n//   }\n\n//   public getPassword(): string {\n//     return this.password;\n//   }\n//   public getUsername(): string {\n//     return this.username;\n//   }\n\n//   public getRoomToClean(): number | null {\n//     return this.roomToClean;\n//   }\n// }\n\n// Authentication service\nexport class AuthenticationService {\n  private static instance: AuthenticationService;\n  private worker: Employee;\n  private status:boolean;\n\n  constructor(){\n    this.status\n  }\n\n  static getInstance(): AuthenticationService {\n    if (!AuthenticationService.instance) {\n      AuthenticationService.instance = new AuthenticationService();\n    }\n    return AuthenticationService.instance;\n  }\n\n  // register(username: string, password: string): void {\n  //   const newUser = new Worker(username, password);\n  //   this.users.push(newUser);\n  //   console.log(`User \"${username}\" registered successfully!`);\n  // }\n\n  public async login(workerId: number, name: string) {\n    let workerObject = await getWorkerById(workerId).then((employee) => {\n      return employee;\n    });\n    if (workerObject.length !== 0) {\n      if (workerObject[0].status === true) {\n        alert(`User \"${name}\" logged in successfully!`);\n      }\n    }\n  }\n\n  public getWorker() {\n    return this.worker;\n  }\n\n  logout(username: string): void {\n    console.log(`User \"${username}\" logged out successfully!`);\n    this.lastLogin = null;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA,SAAmBA,aAAa,QAAQ,2BAA2B;AACnE,MAAMC,eAAe,GAAG,+BAA+B;AACvD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,OAAO,MAAMC,qBAAqB,CAAC;EAKjCC,WAAWA,CAAA,EAAE;IAAA,KAHLC,MAAM;IAAA,KACNC,MAAM;IAGZ,IAAI,CAACA,MAAM;EACb;EAEA,OAAOC,WAAWA,CAAA,EAA0B;IAC1C,IAAI,CAACJ,qBAAqB,CAACK,QAAQ,EAAE;MACnCL,qBAAqB,CAACK,QAAQ,GAAG,IAAIL,qBAAqB,CAAC,CAAC;IAC9D;IACA,OAAOA,qBAAqB,CAACK,QAAQ;EACvC;;EAEA;EACA;EACA;EACA;EACA;;EAEA,MAAaC,KAAKA,CAACC,QAAgB,EAAEC,IAAY,EAAE;IACjD,IAAIC,YAAY,GAAG,MAAMX,aAAa,CAACS,QAAQ,CAAC,CAACG,IAAI,CAAEC,QAAQ,IAAK;MAClE,OAAOA,QAAQ;IACjB,CAAC,CAAC;IACF,IAAIF,YAAY,CAACG,MAAM,KAAK,CAAC,EAAE;MAC7B,IAAIH,YAAY,CAAC,CAAC,CAAC,CAACN,MAAM,KAAK,IAAI,EAAE;QACnCU,KAAK,CAAE,SAAQL,IAAK,2BAA0B,CAAC;MACjD;IACF;EACF;EAEOM,SAASA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACZ,MAAM;EACpB;EAEAa,MAAMA,CAACC,QAAgB,EAAQ;IAC7BC,OAAO,CAACC,GAAG,CAAE,SAAQF,QAAS,4BAA2B,CAAC;IAC1D,IAAI,CAACG,SAAS,GAAG,IAAI;EACvB;AACF;AAzCanB,qBAAqB,CACjBK,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}