{"ast":null,"code":"//Передбачається функція,що визначає загальний інтерфейс для створення об’єктів у суперкласі, дозволяючи підкласам змінювати тип створюваних об’єктів.)  - Pattern Фабричний метод[Factory Method]\n\nexport class PaymentFactory {\n  createPayment(paymentType, paymentDetails) {\n    switch (paymentType) {\n      case \"Cash\":\n        return new CashPayment();\n      case \"MonoPay\":\n        const {\n          cardNumber,\n          cardExpiration,\n          cardCvv\n        } = paymentDetails;\n        return new CreditCardPayment(cardNumber, cardExpiration, cardCvv);\n      case \"PayPal\":\n        const {\n          payPalName,\n          payPalPass\n        } = paymentDetails;\n        return new PayPalPaymentStrategy(payPalName, payPalPass);\n      default:\n        throw new Error(`Invalid payment type: ${paymentType}`);\n    }\n  }\n}\nexport class CashPayment {\n  pay(amount) {\n    alert(`Payment of ${amount} by cash.`);\n  }\n}\nexport class CreditCardPayment {\n  constructor(cardNumber, cardExpiration, cardCVV) {\n    this.cardNumber = void 0;\n    this.cardExpiration = void 0;\n    this.cardCVV = void 0;\n    this.cardNumber = cardNumber;\n    this.cardExpiration = cardExpiration;\n    this.cardCVV = cardCVV;\n  }\n  pay(amount) {\n    alert(`Payment of ${amount} by credit card: ${this.cardNumber}.`);\n  }\n}\nexport class PayPalPaymentStrategy {\n  constructor(paypalUsername, paypalPassword) {\n    this.paypalUsername = void 0;\n    this.paypalPassword = void 0;\n    this.paypalUsername = paypalUsername;\n    this.paypalPassword = paypalPassword;\n  }\n  pay(amount) {\n    alert(`Payment of ${amount} via PayPal with username: ${this.paypalUsername}.`);\n  }\n}","map":{"version":3,"names":["PaymentFactory","createPayment","paymentType","paymentDetails","CashPayment","cardNumber","cardExpiration","cardCvv","CreditCardPayment","payPalName","payPalPass","PayPalPaymentStrategy","Error","pay","amount","alert","constructor","cardCVV","paypalUsername","paypalPassword"],"sources":["/Users/andreyfesiuk/Desktop/Курсова ООП/HotelInformalSystem/src/components/Payments/PaymentsFactoryMethod.ts"],"sourcesContent":["//Передбачається функція,що визначає загальний інтерфейс для створення об’єктів у суперкласі, дозволяючи підкласам змінювати тип створюваних об’єктів.)  - Pattern Фабричний метод[Factory Method]\n\nexport class PaymentFactory {\n  createPayment(paymentType: string, paymentDetails: any): PaymentWays {\n    switch (paymentType) {\n      case \"Cash\":\n        return new CashPayment();\n      case \"MonoPay\":\n        const { cardNumber, cardExpiration, cardCvv } = paymentDetails;\n        return new CreditCardPayment(\n          cardNumber,\n          cardExpiration,\n          cardCvv\n        );\n      case \"PayPal\":\n        const { payPalName, payPalPass } = paymentDetails;\n        return new PayPalPaymentStrategy(payPalName, payPalPass);\n      default:\n        throw new Error(`Invalid payment type: ${paymentType}`);\n    }\n  }\n}\n\ninterface PaymentWays {\n  pay(amount: number): void;\n}\n\nexport class CashPayment implements PaymentWays {\n  pay(amount: number): void {\n    alert(`Payment of ${amount} by cash.`);\n  }\n}\n\nexport class CreditCardPayment implements PaymentWays {\n  private cardNumber: string;\n  private cardExpiration: string;\n  private cardCVV: string;\n\n  constructor(cardNumber: string, cardExpiration: string, cardCVV: string) {\n    this.cardNumber = cardNumber;\n    this.cardExpiration = cardExpiration;\n    this.cardCVV = cardCVV;\n  }\n\n  pay(amount: number): void {\n    alert(`Payment of ${amount} by credit card: ${this.cardNumber}.`);\n  }\n}\n\nexport class PayPalPaymentStrategy implements PaymentWays {\n  private paypalUsername: string;\n  private paypalPassword: string;\n\n  constructor(paypalUsername: string, paypalPassword: string) {\n    this.paypalUsername = paypalUsername;\n    this.paypalPassword = paypalPassword;\n  }\n\n  pay(amount: number): void {\n    alert(\n      `Payment of ${amount} via PayPal with username: ${this.paypalUsername}.`\n    );\n  }\n}\n"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,cAAc,CAAC;EAC1BC,aAAaA,CAACC,WAAmB,EAAEC,cAAmB,EAAe;IACnE,QAAQD,WAAW;MACjB,KAAK,MAAM;QACT,OAAO,IAAIE,WAAW,CAAC,CAAC;MAC1B,KAAK,SAAS;QACZ,MAAM;UAAEC,UAAU;UAAEC,cAAc;UAAEC;QAAQ,CAAC,GAAGJ,cAAc;QAC9D,OAAO,IAAIK,iBAAiB,CAC1BH,UAAU,EACVC,cAAc,EACdC,OACF,CAAC;MACH,KAAK,QAAQ;QACX,MAAM;UAAEE,UAAU;UAAEC;QAAW,CAAC,GAAGP,cAAc;QACjD,OAAO,IAAIQ,qBAAqB,CAACF,UAAU,EAAEC,UAAU,CAAC;MAC1D;QACE,MAAM,IAAIE,KAAK,CAAE,yBAAwBV,WAAY,EAAC,CAAC;IAC3D;EACF;AACF;AAMA,OAAO,MAAME,WAAW,CAAwB;EAC9CS,GAAGA,CAACC,MAAc,EAAQ;IACxBC,KAAK,CAAE,cAAaD,MAAO,WAAU,CAAC;EACxC;AACF;AAEA,OAAO,MAAMN,iBAAiB,CAAwB;EAKpDQ,WAAWA,CAACX,UAAkB,EAAEC,cAAsB,EAAEW,OAAe,EAAE;IAAA,KAJjEZ,UAAU;IAAA,KACVC,cAAc;IAAA,KACdW,OAAO;IAGb,IAAI,CAACZ,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACW,OAAO,GAAGA,OAAO;EACxB;EAEAJ,GAAGA,CAACC,MAAc,EAAQ;IACxBC,KAAK,CAAE,cAAaD,MAAO,oBAAmB,IAAI,CAACT,UAAW,GAAE,CAAC;EACnE;AACF;AAEA,OAAO,MAAMM,qBAAqB,CAAwB;EAIxDK,WAAWA,CAACE,cAAsB,EAAEC,cAAsB,EAAE;IAAA,KAHpDD,cAAc;IAAA,KACdC,cAAc;IAGpB,IAAI,CAACD,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,cAAc,GAAGA,cAAc;EACtC;EAEAN,GAAGA,CAACC,MAAc,EAAQ;IACxBC,KAAK,CACF,cAAaD,MAAO,8BAA6B,IAAI,CAACI,cAAe,GACxE,CAAC;EACH;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}