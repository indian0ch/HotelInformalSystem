{"ast":null,"code":"export class StandartReservation {\n  Reservation() {\n    console.log(\"Резервація стандартного номера\");\n  }\n}\nexport class MiddleReservation {\n  Reservation() {\n    console.log(\"Резервація середнього номера\");\n  }\n}\nexport class LuxuryReservation {\n  Reservation() {\n    console.log(\"Резервація люксового номера\");\n  }\n}\nexport class Room {\n  constructor() {\n    let surname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Fesiuk\";\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Andrey\";\n    let id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3434;\n    let city = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"Kyiv\";\n    let res = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new StandartReservation();\n    this.surname = void 0;\n    this.name = void 0;\n    this.id = void 0;\n    this.city = void 0;\n    this.Reserv = void 0;\n    this.surname = surname;\n    this.name = name;\n    this.id = id;\n    this.city = city;\n    this.Reserv = res;\n  }\n  Reservation() {\n    this.Reserv.Reservation();\n  }\n}\n///\nclass Facade {\n  /**\n   * Depending on your application's needs, you can provide the Facade with\n   * existing subsystem objects or force the Facade to create them on its own.\n   */\n  constructor(subsystem1, subsystem2) {\n    this.subsystem1 = void 0;\n    this.subsystem2 = void 0;\n    this.subsystem1 = subsystem1 || new Subsystem1();\n    this.subsystem2 = subsystem2 || new Subsystem2();\n  }\n\n  /**\n   * The Facade's methods are convenient shortcuts to the sophisticated\n   * functionality of the subsystems. However, clients get only to a fraction\n   * of a subsystem's capabilities.\n   */\n  operation() {\n    let result = \"Facade initializes subsystems:\\n\";\n    result += this.subsystem1.operation1();\n    result += this.subsystem2.operation1();\n    result += \"Facade orders subsystems to perform the action:\\n\";\n    result += this.subsystem1.operationN();\n    result += this.subsystem2.operationZ();\n    return result;\n  }\n}\n\n/**\n * The Subsystem can accept requests either from the facade or client directly.\n * In any case, to the Subsystem, the Facade is yet another client, and it's not\n * a part of the Subsystem.\n */\nclass Subsystem1 {\n  operation1() {\n    return \"Subsystem1: Ready!\\n\";\n  }\n\n  // ...\n\n  operationN() {\n    return \"Subsystem1: Go!\\n\";\n  }\n}\n\n/**\n * Some facades can work with multiple subsystems at the same time.\n */\nclass Subsystem2 {\n  operation1() {\n    return \"Subsystem2: Get ready!\\n\";\n  }\n\n  // ...\n\n  operationZ() {\n    return \"Subsystem2: Fire!\";\n  }\n}","map":{"version":3,"names":["StandartReservation","Reservation","console","log","MiddleReservation","LuxuryReservation","Room","constructor","surname","arguments","length","undefined","name","id","city","res","Reserv","Facade","subsystem1","subsystem2","Subsystem1","Subsystem2","operation","result","operation1","operationN","operationZ"],"sources":["/Users/andreyfesiuk/Desktop/Курсова ООП/HotelInformalSystem/src/components/Reservation/ReservationStrategy.ts"],"sourcesContent":["export interface IReservationStrategy {\n  Reservation(): void;\n}\n\nexport class StandartReservation implements IReservationStrategy {\n  Reservation() {\n    console.log(\"Резервація стандартного номера\");\n  }\n}\n\nexport class MiddleReservation implements IReservationStrategy {\n  Reservation() {\n    console.log(\"Резервація середнього номера\");\n  }\n}\n\nexport class LuxuryReservation implements IReservationStrategy {\n  Reservation() {\n    console.log(\"Резервація люксового номера\");\n  }\n}\n\nexport class Room {\n  protected surname: string;\n  protected name: string;\n  protected id: number;\n  protected city: string;\n  public Reserv: IReservationStrategy;\n\n  constructor(\n    surname: string = \"Fesiuk\",\n    name: string = \"Andrey\",\n    id: number = 3434,\n    city: string = \"Kyiv\",\n    res: IReservationStrategy = new StandartReservation()\n  ) {\n    this.surname = surname;\n    this.name = name;\n    this.id = id;\n    this.city = city;\n    this.Reserv = res;\n  }\n\n  public Reservation() {\n    this.Reserv.Reservation();\n  }\n}\n///\nclass Facade {\n  protected subsystem1: Subsystem1;\n\n  protected subsystem2: Subsystem2;\n\n  /**\n   * Depending on your application's needs, you can provide the Facade with\n   * existing subsystem objects or force the Facade to create them on its own.\n   */\n  constructor(subsystem1?: Subsystem1, subsystem2?: Subsystem2) {\n    this.subsystem1 = subsystem1 || new Subsystem1();\n    this.subsystem2 = subsystem2 || new Subsystem2();\n  }\n\n  /**\n   * The Facade's methods are convenient shortcuts to the sophisticated\n   * functionality of the subsystems. However, clients get only to a fraction\n   * of a subsystem's capabilities.\n   */\n  public operation(): string {\n    let result = \"Facade initializes subsystems:\\n\";\n    result += this.subsystem1.operation1();\n    result += this.subsystem2.operation1();\n    result += \"Facade orders subsystems to perform the action:\\n\";\n    result += this.subsystem1.operationN();\n    result += this.subsystem2.operationZ();\n\n    return result;\n  }\n}\n\n/**\n * The Subsystem can accept requests either from the facade or client directly.\n * In any case, to the Subsystem, the Facade is yet another client, and it's not\n * a part of the Subsystem.\n */\nclass Subsystem1 {\n  public operation1(): string {\n    return \"Subsystem1: Ready!\\n\";\n  }\n\n  // ...\n\n  public operationN(): string {\n    return \"Subsystem1: Go!\\n\";\n  }\n}\n\n/**\n * Some facades can work with multiple subsystems at the same time.\n */\nclass Subsystem2 {\n  public operation1(): string {\n    return \"Subsystem2: Get ready!\\n\";\n  }\n\n  // ...\n\n  public operationZ(): string {\n    return \"Subsystem2: Fire!\";\n  }\n}\n"],"mappings":"AAIA,OAAO,MAAMA,mBAAmB,CAAiC;EAC/DC,WAAWA,CAAA,EAAG;IACZC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;EAC/C;AACF;AAEA,OAAO,MAAMC,iBAAiB,CAAiC;EAC7DH,WAAWA,CAAA,EAAG;IACZC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;EAC7C;AACF;AAEA,OAAO,MAAME,iBAAiB,CAAiC;EAC7DJ,WAAWA,CAAA,EAAG;IACZC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;EAC5C;AACF;AAEA,OAAO,MAAMG,IAAI,CAAC;EAOhBC,WAAWA,CAAA,EAMT;IAAA,IALAC,OAAe,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,QAAQ;IAAA,IAC1BG,IAAY,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,QAAQ;IAAA,IACvBI,EAAU,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IAAA,IACjBK,IAAY,GAAAL,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,MAAM;IAAA,IACrBM,GAAyB,GAAAN,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAIT,mBAAmB,CAAC,CAAC;IAAA,KAX7CQ,OAAO;IAAA,KACPI,IAAI;IAAA,KACJC,EAAE;IAAA,KACFC,IAAI;IAAA,KACPE,MAAM;IASX,IAAI,CAACR,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACI,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACE,MAAM,GAAGD,GAAG;EACnB;EAEOd,WAAWA,CAAA,EAAG;IACnB,IAAI,CAACe,MAAM,CAACf,WAAW,CAAC,CAAC;EAC3B;AACF;AACA;AACA,MAAMgB,MAAM,CAAC;EAKX;AACF;AACA;AACA;EACEV,WAAWA,CAACW,UAAuB,EAAEC,UAAuB,EAAE;IAAA,KARpDD,UAAU;IAAA,KAEVC,UAAU;IAOlB,IAAI,CAACD,UAAU,GAAGA,UAAU,IAAI,IAAIE,UAAU,CAAC,CAAC;IAChD,IAAI,CAACD,UAAU,GAAGA,UAAU,IAAI,IAAIE,UAAU,CAAC,CAAC;EAClD;;EAEA;AACF;AACA;AACA;AACA;EACSC,SAASA,CAAA,EAAW;IACzB,IAAIC,MAAM,GAAG,kCAAkC;IAC/CA,MAAM,IAAI,IAAI,CAACL,UAAU,CAACM,UAAU,CAAC,CAAC;IACtCD,MAAM,IAAI,IAAI,CAACJ,UAAU,CAACK,UAAU,CAAC,CAAC;IACtCD,MAAM,IAAI,mDAAmD;IAC7DA,MAAM,IAAI,IAAI,CAACL,UAAU,CAACO,UAAU,CAAC,CAAC;IACtCF,MAAM,IAAI,IAAI,CAACJ,UAAU,CAACO,UAAU,CAAC,CAAC;IAEtC,OAAOH,MAAM;EACf;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMH,UAAU,CAAC;EACRI,UAAUA,CAAA,EAAW;IAC1B,OAAO,sBAAsB;EAC/B;;EAEA;;EAEOC,UAAUA,CAAA,EAAW;IAC1B,OAAO,mBAAmB;EAC5B;AACF;;AAEA;AACA;AACA;AACA,MAAMJ,UAAU,CAAC;EACRG,UAAUA,CAAA,EAAW;IAC1B,OAAO,0BAA0B;EACnC;;EAEA;;EAEOE,UAAUA,CAAA,EAAW;IAC1B,OAAO,mBAAmB;EAC5B;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}