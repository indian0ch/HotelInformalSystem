@startuml
class ReservationRoomFacade {
  - reservationRoom: ReservationRoom

  + ReservationRoomFacade(reservationRoom: ReservationRoom)
  + doReservation(): void
}

class ReservationRoom {
  - guest: Guest
  - room: Room
  - typeRoom: number
  - checkInDate: string
  - checkOutDate: string
  - servicePrice: number

  + ReservationRoom(full_name: string = "Fesiuk_Andrey", 
  phoneNumbe: string = "030302032", id: number = 32335552, 
  email: string = "den@gmail.com", checkInDate: string = "2023-06-01", 
  checkOutDate: string = "2023-06-03", typeRoom: number = 100, servicePrice: number = 20)
  + checkAvailability(): Promise<any>
}

class Guest {
  - id: number
  - name: string
  - email: string
  - phoneNumber: string
  - priceService: number

  + Guest(id: number, name: string, email: string, 
  phoneNumber: string, priceService: number)
  + getId(): number
  + getName(): string
  + getEmail(): string
  + getPhoneNumber(): string
  + updateEmail(newEmail: string): void
  + updatePhoneNumber(newPhoneNumber: string): void
  + postGuest(newGuest: Guest): void
}

class Room {
  + id: string
  - roomNumber: number
  - checkInDate: Date | null
  - checkOutDate: Date | null
  - guestId: string | null
  - isCleaned: boolean
  - pricePerNight: number

  + Room(id: string, roomNumber: number, 
  pricePerNight: number)
  + getId(): string
  + getRoomNumber(): number
  + getCheckInDate(): Date | null
  + getCheckOutDate(): Date | null
  + getGuestId(): string | null
  + isClean(): boolean
  + getPricePerNight(): number
  + checkIn(guestId: string, checkInDate: Date): void
  + checkOut(): void
  + cleanRoom(): void
}

Application --> ReservationRoomFacade
ReservationRoomFacade ..>Room
ReservationRoomFacade ..>Guest
ReservationRoomFacade ..>ReservationRoom

@enduml














